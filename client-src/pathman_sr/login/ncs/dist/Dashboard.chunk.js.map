{"version":3,"sources":["webpack:///./src/Dashboard/Dashboard.jsx","webpack:///./packages/core/utils/list.js","webpack:///./src/modules/devices/actions.js","webpack:///./src/modules/services/actions.js","webpack:///./src/Common/Components/DataWidget/DataWidget.jsx","webpack:///./src/modules/globalSettings/actions.js","webpack:///./packages/styles/static/AlarmSymbol.jsx","webpack:///./src/Common/Components/DataWidget/DataWidgetStyles.js","webpack:///./src/modules/sessions/paths.js","webpack:///./src/Dashboard/DeviceWidgetContainer.jsx","webpack:///./src/Dashboard/static/Connections.jsx","webpack:///./src/Dashboard/AlarmWidgetContainer.jsx","webpack:///./src/modules/alarms/actions.js","webpack:///./src/modules/alarms/selectors.js","webpack:///./src/Dashboard/AlarmWidgetStyles.js","webpack:///./src/Dashboard/SessionWidgetContainer.jsx","webpack:///./src/modules/sessions/actions.js","webpack:///./src/modules/sessions/selectors.js","webpack:///./src/Dashboard/static/User.jsx","webpack:///./src/Dashboard/ServiceDeploymentWidgetContainer.jsx","webpack:///./src/Common/Components/DataWidget/PercentageItem.jsx","webpack:///./src/Dashboard/static/Cloud.jsx","webpack:///./src/Dashboard/ServiceInstancesWidgetContainer.jsx","webpack:///./src/Dashboard/static/Terminal.jsx","webpack:///./src/Dashboard/DashboardStyles.js"],"names":["style","application","defaultStyles","shadow","scrollingContainer","widgetsContainer","rows","sortOrder","length","columnKey","ord","isDesc","sort","ad","bd","a","data","b","localeCompare","parseInt","Infinity","schema","keyNames","children","filter","c","indexOf","S","kind","map","name","isLeafList","isEmptyLeaf","keys","items","skipQuotesOnKeys","Object","reduce","acc","cur","curObj","push","value","quoteKey","join","columnChildren","columnsVisibility","key","includes","isSelected","deviceNames","type","actionTypes","DEVICES_SELECT","addDevicesToGroupStartAction","group","ADD_DEVICES_TO_GROUP_START","addDevicesToGroupCompleteAction","ADD_DEVICES_TO_GROUP_COMPLETE","addDevicesToGroupErrorAction","error","ADD_DEVICES_TO_GROUP_ERROR","label","LABEL_ADD","LABEL_REMOVE","loadDeviceGroupsStartAction","LOAD_DEVICE_GROUPS_START","loadDeviceGroupsCompleteAction","result","LOAD_DEVICE_GROUPS_COMPLETE","loadDeviceGroupsErrorAction","LOAD_DEVICE_GROUPS_ERROR","loadModulesStartAction","path","LOAD_MODULES_START","loadModulesCompleteAction","LOAD_MODULES_COMPLETE","loadModulesErrorAction","LOAD_MODULES_ERROR","removeDevicesFromGroupCompleteAction","REMOVE_DEVICES_FROM_GROUP_COMPLETE","removeDevicesFromGroupErrorAction","REMOVE_DEVICES_FROM_GROUP_ERROR","removeDevicesFromGroupStartAction","REMOVE_DEVICES_FROM_GROUP_START","SHOW_ADD_DEVICE_MODAL","HIDE_ADD_DEVICE_MODAL","column","isExpanded","SET_EXPANDED_ROW","getDevices","chunkSize","offset","sortorder","xpathExpression","selection","QUERY_SELECTION","funcs","getSchema","_getSchema","query","_query","dispatch","devicesRootPath","params","levels","stop_on_list","reload","then","querySelection","uniq","deviceListPath","initialOffset","result_as","xpathExpr","contextNode","loadDeviceGroups","deviveGroupListPath","groups","results","Promise","resolve","undefined","all","r","getDeviceGroupDeviceListPath","catch","getValueFromResult","obj","values","addValues","valuesToAdd","createAllowExistsThunk","_createAllowExistsThunk","minValuesToAdd","difference","isEmpty","createOperations","d","getDeviceGroupDeviceListDevicePath","union","devices","addValuesFunc","loadDeviceGroupsFunc","groupPath","deleteNodesThunk","_deleteNodesThunk","valuesToRm","intersect","paths","deviceRE","configPath","readThunk","read","jsonrpcQuery","match","exec","th","module","parentPath","keyValues","createDisallowExistsThunk","_createDisallowExistsThunk","getDevicesThunk","validKeyValue","getServicesStartAction","SERVICES_GET_START","getServicesCompleteAction","SERVICES_GET_COMPLETE","getServicesErrorAction","SERVICES_GET_ERROR","names","SERVICES_SELECT","getServiceDeploymentsAction","deployments","SERVICE_DEPLOYMENTS_GET","getServiceDeploymentsStartAction","SERVICE_DEPLOYMENTS_GET_START","getServiceDeploymentsErrorAction","SERVICE_DEPLOYMENTS_GET_ERROR","getServiceInstanceCountStartAction","SERVICE_INSTANCE_COUNT_GET_START","getServiceInstanceCountAction","count","SERVICE_INSTANCE_COUNT_GET","getServiceInstanceCountErrorAction","SERVICE_INSTANCE_COUNT_GET_ERROR","getServicePointsAction","action","SERVICE_POINTS_GET","lastService","SERVICE_SET_LAST_SERVICE","getServicePointSchemasCompleteAction","schemas2","types","GET_SERVICE_POINT_SCHEMAS_COMPLETE","SET_SEARCH","getServicePoints","jsonrpc","jsonrpcSimple","dispatchSchemas","schemaResults","schemas","responses","zipObject","getSchemasFromResponses","getTypesFromResponses","getServicePointsSchemas","servicePoints","getSchemas","_getSchemas","getLastTh","_getLastTh","dispatchSchemasFunc","async","getKeys","keypath","base","getServiceList","sortColumn","getState","searchString","selectServiceSearch","predicates","isNonEmptyArray","k","getServicePointsAndSchemas","getServicePointsFunc","getServicePointsSchemasFunc","service_points","filteredSchemas","s","isAccessDenied","filteredServicePoints","servicePoint","getServicePointsAndSchemasFunc","getServiceListFunc","getGlobalApplicationSettingFunc","getGlobalApplicationSetting","setting","ACTION_STATUS_INDICATOR_TIMEOUT","currentServicePointResult","isNonEmptyString","e","parseDeploymentTriggers","triggers","tr","status","violated","jeopardized","running","successful","xpath_expr","zipQueryResult","getCount","res","isPresenceContainer","toNumber","exists","flatten","ensureArray","shift","resultToInstanceCount","idx","requestServiceCounts","filteredResults","requests","method","constructCountContainerServicesRequest","initial_offset","chunk_size","constructCountListServicesRequest","countServices","batch","jsonrpcBatch","serviceCounter","selectServiceInstanceCountIsLoading","err","servicePath","runCustomActionThunk","_runCustomActionThunk","executePath","getPaths","DataWidget","title","symbol","isLoading","item","index","Link","to","data-handle","itemLink","itemName","itemValue","widget","header","titleContainer","loader","color","color3","visibility","propTypes","PropTypes","string","shape","arrayOf","bool","oneOfType","number","object","getGlobalApplicationSettingsStartAction","GET_GLOBAL_APPLICATION_SETTINGS_START","getGlobalApplicationSettingsErrorAction","GET_GLOBAL_APPLICATION_SETTINGS_ERROR","getGlobalApplicationSettingsCompleteAction","GET_GLOBAL_APPLICATION_SETTINGS_COMPLETE","getValue","_getValue","Error","response","hasProp","AlarmSymbol","version","baseProfile","x","y","viewBox","xmlSpace","fill","display","flexWrap","justifyContent","lineHeight","fontSize","medium3","minWidth","margin","backgroundColor","fontFamily","font2","fontWeight","color2","paddingTop","paddingLeft","paddingBottom","textDecoration","position","marginTop","color1","huge1","width","height","alignSelf","medium2","textColor3","padding","percentageItem","percentage","marginLeft","isDeviceOperation","isDeleteOrCreate","isDeviceListItem","isDeviceNedId","DeviceWidgetContainer","React","Component","constructor","props","super","this","onCometUpdate","bind","onIpcUpdate","callGetDevices","debounceFunction","milliseconds","waitWhileSpammed","UNSAFE_componentWillMount","onLoad","onSubscribe","onSubscribeIpc","componentWillUnmount","onUnsubscribe","onUnsubscribeIpc","notification","changes","some","change","op","message","messageTypes","nodesActionTypes","CREATE","DELETE","render","mapDispatchToProps","COLUMNS","SERVICES","handler","subscribeChangesAction","ipcSubscribeAction","unsubscribeChangesAction","ipcUnsubscribeAction","func","isRequired","mapStateToProps","state","filteredDeviceCountSelector","countDevicesByType","deviceListIsLoading","connect","Connections","id","cx","cy","rx","ry","defaultProps","ALARM_ROOT_PATH","getLinkWithPath","buildAlarmsOfSeverity","alarms","severity","Array","isArray","alarm","alarmKeys","device","escapeKey","buildSummary","summary","selectedAlarm","onSelectAlarm","customContent","alarmSeverity","selected","stl","alarmButton","role","tabIndex","onClick","buildAlarmLink","AlarmWidgetContainer","timeout","componentDidMount","onGetAlarms","clearTimeout","setTimeout","slice","setState","alarmList","alarmSummary","alarmSubscriptionPaths","getAlarmSummary","getAlarms","subscribeCdbOperAction","unsubscribeCdbOperAction","selectAlarmListResult","selectAlarmSummaryResults","selectAlarmListIsLoading","selectAlarmSummaryIsLoading","getAlarmsStartAction","GET_ALARMS_START","getAlarmsCompleteAction","GET_ALARMS_COMPLETE","getAlarmsErrorAction","GET_ALARMS_ERROR","getAlarmSummaryStartAction","GET_ALARM_SUMMARY_START","getAlarmSummaryCompleteAction","GET_ALARM_SUMMARY_COMPLETE","getAlarmSummaryErrorAction","GET_ALARM_SUMMARY_ERROR","resultAs","getValues","_getValues","leafs","emptyObject","freeze","emptyArray","selectAlarmList","createSelector","selectAlarmSummary","borderRadius","cursor","criticals","color5","majors","color15","minors","warnings","indeterminates","SessionWidgetContainer","callUpdate","isObject","new_user","del_user","getUserSessionsThunk","subscribeMessageHandlerAction","unsubscribeMessageHandlerAction","selectUserSessionCount","selectIsLoading","SESSION_SET_SORT_ORDER","getUserSessionsStartAction","GET_USER_SESSIONS_START","getUserSessionsCompleteAction","GET_USER_SESSIONS_COMPLETE","getUserSessionsErrorAction","GET_USER_SESSIONS_ERROR","kickUserStartAction","sessionId","KICK_USER_START","kickUserCompleteAction","KICK_USER_COMPLETE","kickUserErrorAction","KICK_USER_ERROR","nodesQuery","USER_SESSIONS_PATH","delayFunc","delay","getUserSessions","user","Number","selectUserSessionsNode","node","selectNode","selectUserSessions","transport","username","selectSessions","sessions","selectSortOrder","selectKicked","kicked","selectLoading","getTransportDescription","sessionsRowSelector","createSelectorCreator","defaultMemoize","isDeepEqual","session","rowKey","kick","orderedRowsSelector","sortRows","userSessions","User","SERVICEDEPLOYMENT","Messages","DASHBOARD","total","Math","round","deploymentPercentage","ensureNumber","getItems","runningTotal","completedTotal","translate","RUNNING","JEOPARDIZED","VIOLATED","SUCCESSFUL","ServiceDeploymentWidgetContainer","TITLE","getServiceDeployments","ontime","selectServiceDeploymentCount","selectServiceDeployments","selectServiceDeploymentsIsLoading","PercentageItem","Cloud","ServiceInstancesWidgetContainer","callGetServices","componentDidUpdate","prevProps","prevPoints","toRemove","point","toAdd","points","operations","find","startsWith","messagePath","stripListKeys","instances","getServiceInstanceCount","router","selectServiceCountTotal","selectServiceCountByType","selectServicePointsKeypaths","Terminal","flexFlow","backgroundImage","pattern2","overflow","flexGrow","maxWidth"],"mappings":"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","file":"Dashboard.chunk.js","sourcesContent":["import React from 'react';\n\nimport HeaderContainer from 'Common/Components/Header/HeaderContainer';\nimport FooterContainer from 'Common/Components/Footer/FooterContainer';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport DeviceWidgetContainer from './DeviceWidgetContainer';\nimport AlarmWidgetContainer from './AlarmWidgetContainer';\nimport SessionWidgetContainer from './SessionWidgetContainer';\nimport ServiceDeploymentWidgetContainer from './ServiceDeploymentWidgetContainer';\nimport ServiceInstancesWidgetContainer from './ServiceInstancesWidgetContainer';\nimport style from './DashboardStyles';\n\nconst Dashboard = () => (\n    <div style={style.application}>\n        <HeaderContainer>\n            <div style={defaultStyles.shadow} />\n        </HeaderContainer>\n        <div style={style.scrollingContainer}>\n            <div style={style.widgetsContainer}>\n                <DeviceWidgetContainer />\n                <AlarmWidgetContainer />\n                <SessionWidgetContainer />\n                <ServiceInstancesWidgetContainer />\n                <ServiceDeploymentWidgetContainer />\n            </div>\n        </div>\n        <FooterContainer />\n    </div>\n);\n\nexport default Dashboard;\n","import * as S from '../schema';\nimport { quoteKey } from '../functional_utils';\n\nexport const sortRows = (rows, sortOrder) => {\n    if (!sortOrder || rows.length < 2) return rows;\n\n    const { columnKey, isDesc } = sortOrder;\n    const ord = isDesc ? -1 : 1;\n    return [...rows].sort((ad, bd) => {\n        let a = ad.data[columnKey];\n        let b = bd.data[columnKey];\n        if (typeof a === 'string' && typeof b === 'string') {\n            return a.localeCompare(b) * ord;\n        }\n\n        if (typeof a !== typeof b) {\n            a = parseInt(a, 10) || -Infinity;\n            b = parseInt(b, 10) || -Infinity;\n        }\n\n        if (a > b) return 1 * ord;\n        if (a < b) return -1 * ord;\n        return 0;\n    });\n};\n\nexport const getColumnChildren = (schema) => {\n    const hasChildren = schema && schema.data && schema.data.children;\n    let keyNames = hasChildren && schema.data.children\n        .filter(c => ['key', 'leaf'].indexOf(S.kind(c)) > -1)\n        .map(c => ({\n            name: S.name(c),\n            kind: S.kind(c),\n            isLeafList: S.isLeafList(c),\n            isEmptyLeaf: S.isEmptyLeaf(c),\n        }));\n    const keys = schema && schema.data && S.keyNames(schema);\n    if (keys && (!keyNames || keyNames.length === 0)) {\n        keyNames = keys.map(name => ({\n            name,\n            kind: 'key',\n            isLeafList: false,\n            isEmptyLeaf: false,\n        }));\n    }\n    return keyNames;\n};\n\nexport const getKeyValue = (items, skipQuotesOnKeys) => {\n    const values = Object.keys(items).reduce((acc, cur) => {\n        const curObj = items[cur];\n        if (curObj.kind === 'key' || curObj.kind === 'leaf-list') {\n            acc.push(skipQuotesOnKeys ? curObj.value : quoteKey(curObj.value));\n        }\n        return acc;\n    }, []);\n    return values.join(' ');\n};\n\nexport const getQuerySelection = ({ isLeafList, columnChildren }) => {\n    if (isLeafList === true) {\n        return undefined;\n    }\n    return columnChildren.map(c => c.name);\n};\n\nexport const isVisibleColumn = (columnsVisibility, c) =>\n    !columnsVisibility ||\n    !(c.key in columnsVisibility) ||\n    columnsVisibility[c.key].includes('VISIBLE');\n","import {\n    query as jsonrpcQuery,\n} from '@webui-one/core/jsonrpc';\nimport {\n    difference,\n    intersect,\n    isEmpty,\n    union,\n    uniq,\n} from '@webui-one/core/utils/array';\nimport {\n    getSchema as _getSchema,\n} from 'modules/schemas/actions';\nimport {\n    query as _query,\n} from 'modules/nodes/actions';\n\nimport {\n    deleteNodesThunk as _deleteNodesThunk,\n    createAllowExistsThunk as _createAllowExistsThunk,\n    createDisallowExistsThunk as _createDisallowExistsThunk,\n} from 'modules/nodes/thunks';\nimport { read } from 'modules/transactions/actions';\nimport { quoteKey } from '@webui-one/core/functional_utils';\nimport * as actionTypes from './actionTypes';\nimport {\n    QUERY_SELECTION,\n    deviceListPath,\n    devicesRootPath,\n    deviveGroupListPath,\n    getDeviceGroupDeviceListDevicePath,\n    getDeviceGroupDeviceListPath,\n} from './paths';\n\nexport const selectDeviceAction = (isSelected, deviceNames) => ({\n    type: actionTypes.DEVICES_SELECT,\n    deviceNames,\n    isSelected,\n});\n\nexport const addDevicesToGroupStartAction = group => ({\n    type: actionTypes.ADD_DEVICES_TO_GROUP_START,\n    group,\n});\n\nexport const addDevicesToGroupCompleteAction = (group, value) => ({\n    type: actionTypes.ADD_DEVICES_TO_GROUP_COMPLETE,\n    group,\n    value,\n});\n\nexport const addDevicesToGroupErrorAction = (group, error) => ({\n    type: actionTypes.ADD_DEVICES_TO_GROUP_ERROR,\n    group,\n    error,\n});\n\nexport const labelAddAction = label => ({\n    type: actionTypes.LABEL_ADD,\n    label,\n});\n\nexport const labelRemoveAction = label => ({\n    type: actionTypes.LABEL_REMOVE,\n    label,\n});\n\nexport const loadDeviceGroupsStartAction = () => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_START,\n});\n\nexport const loadDeviceGroupsCompleteAction = result => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_COMPLETE,\n    result,\n});\n\nexport const loadDeviceGroupsErrorAction = error => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_ERROR,\n    error,\n});\n\nexport const loadModulesStartAction = path => ({\n    type: actionTypes.LOAD_MODULES_START,\n    path,\n});\n\nexport const loadModulesCompleteAction = (path, result) => ({\n    type: actionTypes.LOAD_MODULES_COMPLETE,\n    path,\n    result,\n});\n\nexport const loadModulesErrorAction = (path, error) => ({\n    type: actionTypes.LOAD_MODULES_ERROR,\n    path,\n    error,\n});\n\nexport const removeDevicesFromGroupCompleteAction = (group, value) => ({\n    type: actionTypes.REMOVE_DEVICES_FROM_GROUP_COMPLETE,\n    group,\n    value,\n});\n\nexport const removeDevicesFromGroupErrorAction = (group, error) => ({\n    type: actionTypes.REMOVE_DEVICES_FROM_GROUP_ERROR,\n    group,\n    error,\n});\n\nexport const removeDevicesFromGroupStartAction = (group, error) => ({\n    type: actionTypes.REMOVE_DEVICES_FROM_GROUP_START,\n    group,\n    error,\n});\n\nexport const getShowAddDeviceModal = () => ({ type: actionTypes.SHOW_ADD_DEVICE_MODAL });\nexport const getHideAddDeviceModal = () => ({ type: actionTypes.HIDE_ADD_DEVICE_MODAL });\n\n\nexport const setDeviceExpandedAction = (path, column, isExpanded) => ({\n    type: actionTypes.SET_EXPANDED_ROW,\n    path,\n    column,\n    isExpanded,\n});\n\nexport const getDevices = ({\n    chunkSize,\n    offset,\n    columnKey,\n    sortorder,\n    xpathExpression,\n    selection = QUERY_SELECTION,\n    funcs: {\n        getSchema = _getSchema,\n        query = _query,\n    } = {},\n} = {}) => dispatch => dispatch(getSchema({\n    path: devicesRootPath,\n    params: {\n        levels: -1,\n        stop_on_list: true,\n    },\n    reload: true,\n})).then(() => {\n    const querySelection = uniq([\n        'name',\n        ...selection,\n    ]);\n    return dispatch(query({\n        selection: querySelection,\n        path: deviceListPath,\n        sort: columnKey,\n        sortOrder: sortorder,\n        initialOffset: offset,\n        chunkSize,\n        result_as: 'string',\n        xpathExpr: xpathExpression,\n        contextNode: devicesRootPath,\n    }));\n});\n\nexport const loadDeviceGroups = ({\n    funcs: {\n        query = _query,\n    } = {},\n} = {}) => (\n    (dispatch) => {\n        dispatch(loadDeviceGroupsStartAction());\n        return dispatch(query({ selection: ['name'], path: deviveGroupListPath }))\n            .then((groups) => {\n                if (groups.result.results.length === 0) return Promise.resolve(undefined);\n                return Promise.all(groups.result.results.map(r => dispatch(query({\n                    selection: undefined,\n                    path: getDeviceGroupDeviceListPath(r.name),\n                }))));\n            })\n            .then(result => (\n                dispatch(loadDeviceGroupsCompleteAction(result))\n            )).catch(error => (\n                dispatch(loadDeviceGroupsErrorAction(error))\n            ));\n    }\n);\n\nexport const getValueFromResult = (result) => {\n    if (!result || !result.result || !result.result.results) return [];\n    return result.result.results.reduce((acc, obj) => [...acc, ...Object.values(obj)], []);\n};\n\nconst addValues = (dispatch, group, valuesToAdd, {\n    funcs: {\n        createAllowExistsThunk = _createAllowExistsThunk,\n    } = {},\n} = {}) => {\n    const path = getDeviceGroupDeviceListPath(group);\n    return dispatch(_query({ selection: undefined, path })).then((result) => {\n        const value = getValueFromResult(result);\n        const minValuesToAdd = difference(valuesToAdd, value);\n        if (isEmpty(minValuesToAdd)) return Promise.resolve(value);\n        const createOperations = minValuesToAdd.map(d =>\n            dispatch(createAllowExistsThunk({\n                path: getDeviceGroupDeviceListDevicePath(group, d),\n            })),\n        );\n        return Promise.all(createOperations).then(() => union(valuesToAdd, value));\n    });\n};\n\nexport const addDevicesToGroup = (devices, group, {\n    funcs: {\n        addValuesFunc = addValues,\n        createAllowExistsThunk = _createAllowExistsThunk,\n        loadDeviceGroupsFunc = loadDeviceGroups,\n    } = {},\n} = {}) => (\n    (dispatch) => {\n        dispatch(addDevicesToGroupStartAction(group));\n        const groupPath = getDeviceGroupDeviceListPath(group);\n        return dispatch(createAllowExistsThunk({ path: groupPath }))\n            .then(() => addValuesFunc(dispatch, group, devices))\n            .then(() => dispatch(loadDeviceGroupsFunc()))\n            .then(() => dispatch(addDevicesToGroupCompleteAction(group)))\n            .catch(error => (\n                dispatch(addDevicesToGroupErrorAction(group, error))\n            ));\n    }\n);\n\nexport const removeDevicesFromGroup = (devices, group, {\n    funcs: {\n        deleteNodesThunk = _deleteNodesThunk,\n        query = _query,\n    } = {},\n} = {}) => (\n    (dispatch) => {\n        dispatch(removeDevicesFromGroupStartAction(group));\n        const path = getDeviceGroupDeviceListPath(group);\n        return dispatch(query({ selection: undefined, path })).then((result) => {\n            const value = getValueFromResult(result);\n            const valuesToRm = intersect(value, devices);\n            return dispatch(deleteNodesThunk({ paths: valuesToRm.map(d => `${path}{${d}}`) }));\n        }).then((value) => {\n            if (value.length > 0 && value[0].error) throw value[0].error;\n            return dispatch(removeDevicesFromGroupCompleteAction(group, value));\n        }).catch(error => (\n            dispatch(removeDevicesFromGroupErrorAction(group, error))\n        ));\n    }\n);\n\nconst deviceRE = /^(\\/ncs:devices\\/device\\{([^}]+)\\}).*/;\n\nexport const loadModules = (configPath, {\n    funcs: {\n        readThunk = read,\n        query = jsonrpcQuery,\n    } = {},\n} = {}) => (\n    (dispatch) => {\n        const match = deviceRE.exec(configPath);\n        if (!match) return Promise.resolve();\n        const path = `${match[1]}/module`;\n        dispatch(loadModulesStartAction(path));\n\n        return dispatch(readThunk()).then(({ th }) => (\n            query({ th, selection: ['name'], path })\n        )).then(result => (\n            dispatch(loadModulesCompleteAction(\n                path,\n                // NOTE(dbildstr): return array of strings instead of array of array of strings\n                result.results.map(module => module[0]),\n            ))\n        )).catch(error => (\n            dispatch(loadModulesErrorAction(path, error))\n        ));\n    }\n);\n\nexport const addDevice = ({\n    parentPath,\n    keyValues,\n    chunkSize,\n    offset,\n    columnKey,\n    sortorder,\n    xpathExpression,\n    funcs: {\n        createDisallowExistsThunk = _createDisallowExistsThunk,\n        getDevicesThunk = getDevices,\n    } = {},\n}) => (\n    (dispatch) => {\n        const validKeyValue = quoteKey(keyValues.name.value);\n        const path = `${parentPath}{${validKeyValue}}`;\n        return dispatch(createDisallowExistsThunk({ path })).then((result) => {\n            if (result.error) return result;\n            return dispatch(\n                getDevicesThunk({\n                    chunkSize,\n                    offset,\n                    columnKey,\n                    sortorder,\n                    xpathExpression,\n                }),\n            );\n        });\n    }\n);\n","import * as S from '@webui-one/core/schema';\nimport * as actionTypes from 'modules/services/actionTypes';\nimport jsonrpcSimple, {\n    getSchemas as _getSchemas,\n    getLastTh as _getLastTh,\n    jsonrpcBatch,\n    zipQueryResult,\n} from '@webui-one/core/jsonrpc';\nimport {\n    ensureArray,\n    flatten,\n    zipObject,\n    isNonEmptyArray,\n} from '@webui-one/core/utils/array';\nimport { toNumber } from '@webui-one/core/utils/number';\nimport { isNonEmptyString } from '@webui-one/core/utils/string';\nimport { query as _query } from 'modules/nodes/actions';\nimport {\n    read,\n} from 'modules/transactions/actions';\nimport {\n    getSchemasFromResponses,\n    getTypesFromResponses,\n} from 'modules/schemas2/actions';\nimport {\n    selectServiceInstanceCountIsLoading,\n    selectServiceSearch,\n} from './selectors';\nimport {\n    runCustomActionThunk as _runCustomActionThunk,\n} from 'modules/yangActions/actions';\nimport {\n    getGlobalApplicationSetting,\n    ACTION_STATUS_INDICATOR_TIMEOUT,\n} from 'modules/globalSettings/actions';\n\nexport const getServicesStartAction = () => ({\n    type: actionTypes.SERVICES_GET_START,\n});\n\nexport const getServicesCompleteAction = () => ({\n    type: actionTypes.SERVICES_GET_COMPLETE,\n});\n\nexport const getServicesErrorAction = error => ({\n    type: actionTypes.SERVICES_GET_ERROR,\n    error,\n});\n\n\nexport const selectServiceAction = (isSelected, names) => ({\n    type: actionTypes.SERVICES_SELECT,\n    names,\n    isSelected,\n});\n\nexport const getServiceDeploymentsAction = deployments => ({\n    type: actionTypes.SERVICE_DEPLOYMENTS_GET,\n    deployments,\n});\n\nexport const getServiceDeploymentsStartAction = () => ({\n    type: actionTypes.SERVICE_DEPLOYMENTS_GET_START,\n});\n\nexport const getServiceDeploymentsErrorAction = () => ({\n    type: actionTypes.SERVICE_DEPLOYMENTS_GET_ERROR,\n});\n\nexport const getServiceInstanceCountStartAction = () => ({\n    type: actionTypes.SERVICE_INSTANCE_COUNT_GET_START,\n});\n\nexport const getServiceInstanceCountAction = count => ({\n    type: actionTypes.SERVICE_INSTANCE_COUNT_GET,\n    count,\n});\n\nexport const getServiceInstanceCountErrorAction = error => ({\n    type: actionTypes.SERVICE_INSTANCE_COUNT_GET_ERROR,\n    error,\n});\n\nexport const getServicePointsAction = action => ({\n    type: actionTypes.SERVICE_POINTS_GET,\n    ...action,\n});\n\nexport const setLastServiceAction = lastService => ({\n    type: actionTypes.SERVICE_SET_LAST_SERVICE,\n    lastService,\n});\n\nexport const getServicePointSchemasCompleteAction = (schemas2, types) => ({\n    type: actionTypes.GET_SERVICE_POINT_SCHEMAS_COMPLETE,\n    schemas2,\n    types,\n});\n\nexport const setServiceExpandedAction = (path, column, isExpanded) => ({\n    type: actionTypes.SET_EXPANDED_ROW,\n    path,\n    column,\n    isExpanded,\n});\n\nexport const setSearchAction = value => ({\n    type: actionTypes.SET_SEARCH,\n    value,\n});\n\nexport const getServicePoints = ({\n    funcs: {\n        jsonrpc = jsonrpcSimple,\n    } = {},\n} = {}) => (\n    jsonrpc('get_service_points', {})\n);\n\nconst dispatchSchemas = ({\n    dispatch,\n    schemas: schemaResults,\n    paths,\n}) => {\n    const responses = zipObject(paths, schemaResults);\n    const schemas2 = getSchemasFromResponses(responses);\n    const types = getTypesFromResponses(schemaResults);\n    dispatch(getServicePointSchemasCompleteAction(schemas2, types));\n};\n\nconst getServicePointsSchemas = (\n    servicePoints, {\n        funcs: {\n            getSchemas = _getSchemas,\n            getLastTh = _getLastTh,\n            dispatchSchemasFunc = dispatchSchemas,\n        } = {},\n    } = {},\n) => (\n    async (dispatch) => {\n        const paths = Object.keys(servicePoints).map(key => (servicePoints[key]));\n        const th = await getLastTh();\n        const schemas = await getSchemas({ th, paths });\n\n        dispatchSchemasFunc({ dispatch, schemas, paths });\n\n        return schemas.map(schema => ({\n            keys: S.getKeys(schema.result),\n            schema: schema.result,\n            path: S.keypath(schema.result),\n            base: S.keypath(schema.result),\n        }));\n    }\n);\n\nconst getServiceList =\n    (result, offset, chunkSize, sortColumn, sortOrder, {\n        funcs: {\n            query = _query,\n        } = {},\n    } = {}) =>\n        (dispatch, getState) => {\n            const searchString = selectServiceSearch(getState());\n            const { keys } = result;\n            const predicates = searchString && isNonEmptyArray(keys) ? `[${result.keys.map((k => `contains(${k}, \"${searchString}\")`)).join(' or ')}]` : '';\n            const xpathExpr = `${result.base}${predicates}`;\n            return dispatch(\n                query({\n                    selection: [...result.keys, 'count(device-list)'],\n                    path: result.base,\n                    sort: sortColumn,\n                    sortOrder,\n                    initialOffset: offset,\n                    chunkSize,\n                    result_as: 'string',\n                    xpathExpr,\n                    contextNode: undefined,\n                }),\n            );\n        };\n\n\nexport const getServicePointsAndSchemas = ({\n    funcs: {\n        getServicePointsFunc = getServicePoints,\n        getServicePointsSchemasFunc = getServicePointsSchemas,\n    } = {},\n} = {}) =>\n    async (dispatch) => {\n        const { service_points: servicePoints } = await getServicePointsFunc();\n\n        const schemas = await dispatch(getServicePointsSchemasFunc(servicePoints));\n        const filteredSchemas = schemas.filter(s => !S.isAccessDenied(s.schema));\n        const filteredServicePoints = filteredSchemas.reduce((acc, s) =>\n            ({ ...acc, [s.path]: s.path }),\n        {});\n        dispatch(getServicePointsAction({ service_points: filteredServicePoints }));\n        return filteredSchemas;\n    };\n\nexport const getServices = ({\n    servicePoint,\n    offset,\n    chunkSize,\n    sortColumn,\n    sortOrder,\n    funcs: {\n        getServicePointsAndSchemasFunc = getServicePointsAndSchemas,\n        getServiceListFunc = getServiceList,\n        getGlobalApplicationSettingFunc = getGlobalApplicationSetting,\n    } = {},\n} = {}) => async (dispatch) => {\n    dispatch(getServicesStartAction());\n    try {\n        await dispatch(getGlobalApplicationSettingFunc({\n            setting: ACTION_STATUS_INDICATOR_TIMEOUT,\n        }));\n        const results = await dispatch(getServicePointsAndSchemasFunc());\n        const currentServicePointResult = results.filter(r => (\n            r.path === servicePoint || !isNonEmptyString(servicePoint)\n        ));\n        await Promise.all(currentServicePointResult.map(result =>\n            dispatch(getServiceListFunc(result, offset, chunkSize, sortColumn, sortOrder))),\n        );\n        dispatch(getServicesCompleteAction());\n    } catch(e) {\n        dispatch(getServicesErrorAction(e));\n    }\n};\n\nconst parseDeploymentTriggers = triggers => triggers.reduce((acc, tr) => {\n    if (tr.status === 'violated') {\n        acc.violated += 1;\n    } else if (tr.status === 'jeopardized') {\n        acc.jeopardized += 1;\n    } else if (tr.status === 'running') {\n        acc.running += 1;\n    } else if (tr.status === 'successful') {\n        acc.successful += 1;\n    }\n    return acc;\n}, { running: 0, successful: 0, violated: 0, jeopardized: 0 });\n\nconst selection = [\n    'jeopardy-result', 'violation-result', 'status',\n];\n\nexport const getServiceDeployments = ({\n    funcs: {\n        readThunk = read,\n        jsonrpc = jsonrpcSimple,\n    } = {},\n} = {}) => (dispatch) => {\n    dispatch(getServiceDeploymentsStartAction());\n    return dispatch(readThunk()).then(({ th }) => jsonrpc('query', {\n        th,\n        selection,\n        xpath_expr: '//service-progress-monitoring/trigger-status',\n    }).then(results => dispatch(\n        getServiceDeploymentsAction(\n            parseDeploymentTriggers(\n                zipQueryResult(selection, results.results),\n            ),\n        )),\n    )).catch(() => dispatch(getServiceDeploymentsErrorAction()));\n};\n\nconst constructCountContainerServicesRequest = (path, th) => ({\n    method: 'exists',\n    params: { path, th },\n});\n\nconst constructCountListServicesRequest = (path, th) => ({\n    method: 'query',\n    params: {\n        path,\n        th,\n        selection: [`count(${path})`],\n        initial_offset: 0,\n        chunk_size: 1,\n        result_as: 'string',\n    },\n});\n\nconst getCount = (res, schema) => {\n    if (S.isPresenceContainer(schema)) {\n        // console.log('presence', res);\n        return toNumber(res.result.exists);\n    }\n    return toNumber(flatten(ensureArray(res && res.result.results)).shift());\n};\n\nconst resultToInstanceCount = results => res => res.reduce((acc, r, idx) => ({\n    ...acc,\n    [results[idx].path]: {\n        count: getCount(r, results[idx].schema),\n        name: S.name(results[idx].schema),\n        servicePoint: results[idx].path,\n    },\n}), {});\n\nconst requestServiceCounts = (results, th) => {\n    const filteredResults = results.filter(result => !S.isAccessDenied(result.schema));\n    const requests = filteredResults.map(result => (\n        S.isPresenceContainer(result.schema)\n            ? constructCountContainerServicesRequest(S.keypath(result.schema), th)\n            : constructCountListServicesRequest(S.keypath(result.schema), th)\n    ));\n    return {\n        filteredResults,\n        requests,\n    };\n};\n\nconst countServices = (\n    dispatch,\n    th,\n    {\n        funcs: {\n            batch = jsonrpcBatch,\n        } = {},\n    } = {},\n) => (results) => {\n    const { filteredResults, requests } = requestServiceCounts(results, th);\n    return batch({ requests })\n        .then(resultToInstanceCount(filteredResults))\n        .then(res => dispatch(getServiceInstanceCountAction(res)));\n};\n\nexport const getServiceInstanceCount = ({\n    funcs: {\n        getServicePointsAndSchemasFunc = getServicePointsAndSchemas,\n        readThunk = read,\n        serviceCounter = countServices,\n    } = {},\n} = {}) =>\n    (dispatch, getState) => {\n        if (selectServiceInstanceCountIsLoading(getState())) {\n            return Promise.resolve();\n        }\n\n        dispatch(getServiceInstanceCountStartAction());\n        return dispatch(readThunk()).then(({ th }) =>\n            dispatch(getServicePointsAndSchemasFunc()).then(\n                serviceCounter(dispatch, th),\n            ),\n        ).catch(err => (\n            dispatch(getServiceInstanceCountErrorAction(err))\n        ));\n    };\n\nconst getPaths = ({ action, servicePath }) => {\n    if (action === 're-deploy dry-run') {\n        return {\n            path: `${servicePath}/${action}`,\n            executePath: `${servicePath}/re-deploy`,\n        };\n    }\n    return { path: `${servicePath}/${action}` };\n};\n\nexport const runServiceActionThunk = ({\n    action,\n    servicePath,\n    funcs: {\n        runCustomActionThunk = _runCustomActionThunk,\n    } = {},\n}) => {\n    const { path, executePath } = getPaths({ action, servicePath });\n    return runCustomActionThunk({ action, path, executePath });\n};\n\n\nexport {\n    parseDeploymentTriggers as _parseDeploymentTriggers,\n    getServicePointsSchemas as _getServicePointsSchemas,\n    countServices as _countServices,\n    requestServiceCounts as _requestServiceCounts,\n    resultToInstanceCount as _resultToInstanceCount,\n    getServiceList as _getServiceList,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router';\n\nimport Loader from '@webui-one/components/Loading/Loader';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport style from './DataWidgetStyles';\n\nconst DataWidget = ({ name, title, symbol, items, isLoading, children }) => {\n    const rows = (items || []).map((item, index) => {\n        if (item.path) {\n            return (\n                <Link\n                    to={item.path}\n                    key={index}\n                    data-handle={`item-${item.name}`}\n                    style={style.itemLink}>\n                    <div style={style.itemName}>{item.name}</div>\n                    <div style={style.itemValue}>{item.value}</div>\n                </Link>\n            );\n        }\n\n        return (\n            <div key={index} data-handle={`item-${item.name}`} style={style.item}>\n                <div style={style.itemName}>{item.name}</div>\n                <div style={style.itemValue}>{item.value}</div>\n            </div>\n        );\n    });\n    return (\n        <div data-handle={`data-widget-${name}`} style={style.widget}>\n            <div style={style.header}>\n                <div style={style.titleContainer}>\n                    <div style={style.symbol}>\n                        {symbol}\n                    </div>\n                    <span style={style.title} data-handle=\"title\">\n                        {title}\n                    </span>\n                </div>\n                { isLoading &&\n                    <div style={style.loader}>\n                        <Loader color={defaultStyles.color3} />\n                    </div>\n                }\n                <div\n                    style={isLoading ? ({ ...style.value, visibility: 'hidden' }) : style.value}\n                    data-handle=\"value\"\n                >\n                    {children}\n                </div>\n            </div>\n            { rows.length > 0 &&\n                <div data-handle=\"items\" style={style.items}>\n                    {rows}\n                </div>\n            }\n        </div>\n    );\n};\n\nDataWidget.propTypes = {\n    name: PropTypes.string,\n    symbol: PropTypes.shape({}),\n    title: PropTypes.string,\n    items: PropTypes.arrayOf(Object),\n    isLoading: PropTypes.bool,\n    children: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object]),\n};\n\nexport default DataWidget;\n","import {\n    getValue as _getValue,\n    getLastTh as _getLastTh,\n} from '@webui-one/core/jsonrpc';\nimport { isNonEmptyString } from '@webui-one/core/utils/string';\nimport { hasProp } from '@webui-one/core/utils/object';\nimport * as actionTypes from './actionTypes';\n\nexport const ACTION_STATUS_INDICATOR_TIMEOUT = 'action-status-indicator-timeout';\n\nexport const getGlobalApplicationSettingsStartAction = () => ({\n    type: actionTypes.GET_GLOBAL_APPLICATION_SETTINGS_START,\n});\n\nexport const getGlobalApplicationSettingsErrorAction = ({ error }) => ({\n    type: actionTypes.GET_GLOBAL_APPLICATION_SETTINGS_ERROR,\n    error,\n});\n\nexport const getGlobalApplicationSettingsCompleteAction = ({ setting, value }) => ({\n    type: actionTypes.GET_GLOBAL_APPLICATION_SETTINGS_COMPLETE,\n    setting,\n    value,\n});\n\nexport const getGlobalApplicationSetting = ({\n    setting,\n    funcs: {\n        getLastTh = _getLastTh,\n        getValue = _getValue,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        try {\n            dispatch(getGlobalApplicationSettingsStartAction());\n\n            if (!isNonEmptyString(setting)) {\n                throw new Error(`Invalid input parameter '${setting}'. Must be string`);\n            }\n\n            const th = await getLastTh();\n            const path = `/webui/applications/${setting}`;\n            const response = await getValue({\n                th,\n                path,\n            });\n\n            if (!hasProp(response, 'value')) {\n                return dispatch(getGlobalApplicationSettingsCompleteAction({\n                    setting,\n                    value: undefined,\n                }));\n            }\n\n            return dispatch(getGlobalApplicationSettingsCompleteAction({\n                setting,\n                value: response.value,\n            }));\n        } catch (error) {\n            return dispatch(getGlobalApplicationSettingsErrorAction({ error }));\n        }\n    }\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AlarmSymbol = ({ color }) =>\n    (<svg version=\"1.2\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 21\" xmlSpace=\"preserve\">\n        <path\n            fill={color}\n            d=\"M12.7,0.5c-0.4-0.7-1.1-0.7-1.5,0L0.2,19.7C-0.2,20.4,0.1,21,0.9,21h22.2\n        c0.8,0,1.2-0.6,0.8-1.3L12.7,0.5z M12.7,17.7C12.5,17.9,12.2,18,12,18c-0.3,0-0.5-0.1-0.7-0.3C11.1,17.5,11,17.2,11,17\n        c0-0.3,0.1-0.5,0.3-0.7c0.4-0.4,1.1-0.4,1.4,0c0.2,0.2,0.3,0.5,0.3,0.7C13,17.2,12.9,17.5,12.7,17.7L12.7,17.7z M13,13.5\n        c0,0.6-0.5,1-1,1s-1-0.5-1-1v-6c0-0.6,0.5-1,1-1s1,0.5,1,1V13.5L13,13.5z\" />\n    </svg>);\n\nAlarmSymbol.propTypes = {\n    color: PropTypes.string,\n};\n\nexport default AlarmSymbol;\n","import * as style from '@webui-one/styles/ApplicationDefaultStyles';\n\nconst item = {\n    display: 'flex',\n    flexWrap: 'nowrap',\n    justifyContent: 'space-between',\n    lineHeight: '1.63',\n    fontSize: style.medium3,\n};\n\nexport default {\n    widget: {\n        minWidth: '20rem',\n        margin: '1rem',\n        backgroundColor: style.color3,\n    },\n    header: {\n        fontFamily: style.font2,\n        fontWeight: '200',\n        backgroundColor: style.color2,\n        paddingTop: '1.625rem',\n        paddingLeft: '1.2rem',\n        paddingBottom: '1rem',\n    },\n    item,\n    itemLink: {\n        ...item,\n        textDecoration: 'none',\n        color: 'inherit',\n    },\n    loader: {\n        position: 'absolute',\n        marginTop: '3rem',\n    },\n    itemName: {\n    },\n    itemValue: {\n        paddingLeft: '0.4rem',\n    },\n    value: {\n        color: style.color1,\n        fontSize: style.huge1,\n        marginTop: '1rem',\n    },\n    titleContainer: {\n        display: 'flex',\n    },\n    symbol: {\n        width: '1.4375rem',\n        height: '1.4375rem',\n        alignSelf: 'center',\n        margin: '0 0.625rem',\n    },\n    title: {\n        fontSize: style.medium2,\n        color: style.textColor3,\n        display: 'inline',\n        alignSelf: 'center',\n    },\n    items: {\n        padding: '1rem',\n    },\n    percentageItem: {\n        percentage: {\n            marginLeft: '0.15rem',\n        },\n    },\n\n};\n","// eslint-disable-next-line import/prefer-default-export\nexport const USER_SESSIONS_PATH = '/ncm:netconf-state/sessions/session';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport * as style from '@webui-one/styles/ApplicationDefaultStyles';\nimport { getDevices } from 'modules/devices/actions';\nimport * as nodesActionTypes from 'modules/nodes/actionTypes';\nimport {\n    COLUMNS,\n    QUERY_SELECTION,\n    deviceListPath,\n} from 'modules/devices/paths';\nimport {\n    deviceListIsLoading,\n    filteredDeviceCountSelector,\n    countDevicesByType,\n} from 'modules/devices/selectors';\nimport {\n    ipcSubscribeAction,\n    ipcUnsubscribeAction,\n} from 'modules/ipc/actions';\nimport {\n    subscribeChangesAction,\n    unsubscribeChangesAction,\n} from 'modules/comet/actions';\nimport { debounceFunction } from '@webui-one/core/utils/async';\nimport {\n    isDeviceListItem,\n    isDeviceNedId,\n} from '@webui-one/core/utils/path';\nimport Connections from './static/Connections';\n\nconst isDeviceOperation = (keypath, isDeleteOrCreate) => {\n    if (isDeviceListItem(keypath) && isDeleteOrCreate) {\n        return true;\n    }\n    if (isDeviceNedId(keypath)) {\n        return true;\n    }\n    return false;\n};\n\nclass DeviceWidgetContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.onIpcUpdate = this.onIpcUpdate.bind(this);\n        this.callGetDevices = debounceFunction({\n            milliseconds: 500,\n            waitWhileSpammed: true,\n        });\n    }\n\n    // eslint-disable-next-line camelcase, react/sort-comp\n    UNSAFE_componentWillMount() {\n        const {\n            onLoad,\n            onSubscribe,\n            onSubscribeIpc,\n        } = this.props;\n        onSubscribe(this.onCometUpdate);\n        onSubscribeIpc(this.onIpcUpdate);\n        onLoad();\n    }\n\n    componentWillUnmount() {\n        const {\n            onUnsubscribe,\n            onUnsubscribeIpc,\n        } = this.props;\n        onUnsubscribe(this.onCometUpdate);\n        onUnsubscribeIpc(this.onIpcUpdate);\n    }\n\n    onCometUpdate(notification) {\n        const { onLoad } = this.props;\n        const shouldUpdateDevices = notification.changes.some(change => (\n            isDeviceOperation(\n                change.keypath,\n                change.op === 'created' || change.op === 'deleted',\n            )\n        ), false);\n        if (shouldUpdateDevices) {\n            this.callGetDevices(onLoad);\n        }\n    }\n\n    onIpcUpdate(message) {\n        const { onLoad } = this.props;\n        const messageTypes = [\n            nodesActionTypes.CREATE,\n            nodesActionTypes.DELETE,\n        ];\n        const shouldUpdateDevices = isDeviceOperation(\n            message.path,\n            messageTypes.includes(message.type),\n        );\n        if (shouldUpdateDevices) {\n            this.callGetDevices(onLoad);\n        }\n    }\n\n    render() {\n        const { count, items, isLoading } = this.props;\n\n        return (<DataWidget\n            items={items}\n            symbol={<Connections color={style.textColor3} />}\n            name=\"devices-connected\"\n            title={'DEVICES CONNECTED'}\n            isLoading={isLoading}\n            >{count}</DataWidget>);\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        const selection = QUERY_SELECTION.filter(c => c !== COLUMNS.SERVICES);\n        return dispatch(getDevices({ selection }));\n    },\n    onSubscribe(handler) {\n        dispatch(subscribeChangesAction(deviceListPath, handler));\n    },\n    onSubscribeIpc(handler) {\n        dispatch(ipcSubscribeAction(handler, []));\n    },\n    onUnsubscribe(handler) {\n        dispatch(unsubscribeChangesAction(deviceListPath, handler));\n    },\n    onUnsubscribeIpc(handler) {\n        dispatch(ipcUnsubscribeAction(handler));\n    },\n});\n\nDeviceWidgetContainer.propTypes = {\n    count: PropTypes.number,\n    items: PropTypes.arrayOf(Object),\n    onLoad: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n    onSubscribe: PropTypes.func.isRequired,\n    onSubscribeIpc: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    onUnsubscribeIpc: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    count: filteredDeviceCountSelector(state),\n    items: countDevicesByType(state),\n    isLoading: !!deviceListIsLoading(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DeviceWidgetContainer);\n\nexport {\n    DeviceWidgetContainer as _DeviceWidgetContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Connections = ({ color }) =>\n    (<svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        id=\"Layer_1\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 23 23\"\n        xmlSpace=\"preserve\">\n        <path\n            fill={color}\n            d=\"M8.6,7.7C8.3,7.9,8.1,8.2,7.9,8.4L6.5,7.1C6.2,7.3,5.8,7.4,5.4,7.4c-1.1,0-2.1-1-2.1-2.2s0.9-2.2,2.1-2.2s2.1,1,2.1,2.2c0,0.4-0.1,0.7-0.3,1L8.6,7.7z\" />\n        <path\n            fill={color}\n            d=\"M14.5,7.5c-0.3-0.2-0.6-0.4-0.9-0.6l1.9-3.2c-0.4-0.4-0.6-0.9-0.6-1.5C14.9,1,15.8,0,16.9,0C18.1,0,19,1,19,2.2c0,1.2-0.9,2.2-2.1,2.2c-0.2,0-0.4,0-0.6-0.1L14.5,7.5z\" />\n        <path\n            fill={color}\n            d=\"M20.9,10.2c1.1,0,2.1,1,2.1,2.2c0,1.2-0.9,2.2-2.1,2.2c-1,0-1.9-0.8-2-1.8l-2.6-0.3c0.1-0.3,0.1-0.7,0.1-1c0,0,0,0,0-0.1l2.6,0.3C19.3,10.8,20,10.2,20.9,10.2z\" />\n        <path\n            fill={color}\n            d=\"M13.8,18.7c1.1,0,2,1,2,2.2c0,1.2-0.9,2.2-2.1,2.2c-1.1,0-2.1-1-2.1-2.2c0-0.8,0.5-1.5,1.1-1.9l-0.6-2.6c0.4,0,0.7-0.1,1-0.2L13.8,18.7z\" />\n        <path\n            fill={color}\n            d=\"M7,12.5c0.1,0.4,0.2,0.7,0.3,1l-3.2,1.1c0,0,0,0.1,0,0.1c0,1.2-0.9,2.2-2.1,2.2c-1.1,0-2.1-1-2.1-2.2c0-1.2,0.9-2.2,2.1-2.2c0.7,0,1.4,0.4,1.7,1L7,12.5z\" />\n        <ellipse fill={color} cx=\"11.7\" cy=\"11.4\" rx=\"3.6\" ry=\"3.7\" />\n    </svg>);\n\nConnections.propTypes = {\n    color: PropTypes.string,\n};\n\nConnections.defaultProps = {\n    color: 'red',\n};\n\nexport default Connections;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport AlarmSymbol from '@webui-one/styles/static/AlarmSymbol';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport { escapeKey } from '@webui-one/core/utils/path';\nimport { quoteKey } from '@webui-one/core/functional_utils';\nimport { getLinkWithPath } from 'ConfigurationEditor';\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport {\n    getAlarms,\n    getAlarmSummary,\n} from 'modules/alarms/actions';\nimport {\n    selectAlarmListResult,\n    selectAlarmListIsLoading,\n    selectAlarmSummaryIsLoading,\n    selectAlarmSummaryResults,\n} from 'modules/alarms/selectors';\nimport {\n    subscribeCdbOperAction,\n    unsubscribeCdbOperAction,\n} from 'modules/comet/actions';\nimport style from './AlarmWidgetStyles';\n\nconst ALARM_ROOT_PATH = getLinkWithPath('/al:alarms/alarm-list/alarm');\n\nconst buildAlarmsOfSeverity = (alarms, severity) => {\n    if (!(Array.isArray(alarms) && typeof severity === 'string' && severity !== '')) {\n        return undefined;\n    }\n\n    return alarms.map((alarm) => {\n        let alarmKeys = `{${quoteKey(alarm.device)} `;\n        alarmKeys += `${quoteKey(alarm.type)} `;\n        alarmKeys += `${quoteKey(alarm['managed-object'])} `;\n        alarmKeys += `${quoteKey(alarm['specific-problem'])}}`;\n        const path = escapeKey(`${ALARM_ROOT_PATH}${alarmKeys}`);\n\n        return { name: alarm.device, value: alarm.type, path };\n    });\n};\n\nconst buildAlarmLink = (alarmSeverity, summary, selectedAlarm, onSelectAlarm) => {\n    const selected = alarmSeverity === selectedAlarm;\n    const stl = selected ?\n        { ...style.alarmButton, backgroundColor: style[alarmSeverity] } :\n        { ...style.alarmButton, color: style[alarmSeverity] };\n    return (<a\n        style={stl}\n        data-handle={`${alarmSeverity}-number`}\n        role=\"button\"\n        tabIndex={0}\n        onClick={() => { onSelectAlarm(alarmSeverity); }}\n        key={alarmSeverity}\n        >\n        {summary[alarmSeverity]}\n    </a>);\n};\n\nconst buildSummary = (summary, selectedAlarm, onSelectAlarm) => {\n    if(!summary) return undefined;\n    return (\n        <div style={style.customContent} >\n            {\n                ['criticals', 'majors', 'minors'].map(alarmSeverity =>\n                    buildAlarmLink(\n                    alarmSeverity,\n                    summary,\n                    selectedAlarm,\n                    onSelectAlarm))\n            }\n        </div>\n    );\n};\n\nclass AlarmWidgetContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onSelectAlarm = this.onSelectAlarm.bind(this);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.state = {\n            selectedAlarm: '',\n        };\n        this.timeout = undefined;\n    }\n\n    componentDidMount() {\n        const { onLoad, onSubscribe } = this.props;\n        onSubscribe(this.onCometUpdate);\n        onLoad();\n    }\n\n    componentWillUnmount() {\n        const { onUnsubscribe } = this.props;\n        onUnsubscribe(this.onCometUpdate);\n    }\n\n    onCometUpdate() {\n        const { onGetAlarms, onLoad } = this.props;\n        const { selectedAlarm } = this.state;\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            onLoad();\n\n            if (selectedAlarm) {\n                onGetAlarms(selectedAlarm.slice(0, -1));\n            }\n        }, 500);\n    }\n\n    onSelectAlarm(alarm) {\n        const { onGetAlarms } = this.props;\n        const { selectedAlarm } = this.state;\n        const value = (selectedAlarm === alarm) ? '' : alarm;\n        this.setState({ selectedAlarm: value });\n        if (value) onGetAlarms(value.slice(0, -1));\n    }\n\n    render() {\n        const { alarmList, alarmSummary, isLoading } = this.props;\n        const { selectedAlarm } = this.state;\n        let items = [];\n        const value = (<div style={{ visibility: isLoading ? 'hidden' : 'visible' }}>\n            {buildSummary(alarmSummary, selectedAlarm, this.onSelectAlarm)}\n        </div>);\n        if (!isLoading) {\n            items = buildAlarmsOfSeverity(alarmList, selectedAlarm);\n        }\n\n        return (<DataWidget\n            symbol={<AlarmSymbol color={defaultStyles.textColor3} />}\n            items={items}\n            name=\"alarms\"\n            title={'ALARMS'}\n            isLoading={isLoading}\n            >{value}</DataWidget>);\n    }\n}\n\nconst alarmSubscriptionPaths = [\n    '/al:alarms/alarm-list/alarm',\n];\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        return dispatch(getAlarmSummary());\n    },\n    onGetAlarms(severity) {\n        return dispatch(getAlarms({ severity }));\n    },\n    onSubscribe(handler) {\n        dispatch(subscribeCdbOperAction(alarmSubscriptionPaths, handler));\n    },\n    onUnsubscribe(handler) {\n        dispatch(unsubscribeCdbOperAction(alarmSubscriptionPaths, handler));\n    },\n});\n\nAlarmWidgetContainer.defaultProps = {\n    isLoading: true,\n    alarmList: [],\n};\n\nAlarmWidgetContainer.propTypes = {\n    onLoad: PropTypes.func.isRequired,\n    onGetAlarms: PropTypes.func.isRequired,\n    onSubscribe: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n    alarmList: PropTypes.arrayOf(\n        PropTypes.shape({}),\n    ),\n    alarmSummary: PropTypes.shape(Object),\n};\n\nconst mapStateToProps = state => ({\n    alarmList: selectAlarmListResult(state),\n    alarmSummary: selectAlarmSummaryResults(state),\n    isLoading: selectAlarmListIsLoading(state) || selectAlarmSummaryIsLoading(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AlarmWidgetContainer);\n\nexport {\n    AlarmWidgetContainer as _AlarmWidgetContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n    buildAlarmsOfSeverity as _buildAlarmsOfSeverity,\n    buildSummary as _buildSummary,\n};\n","import {\n    query as _query,\n    getLastTh as _getLastTh,\n    getValues as _getValues,\n    zipQueryResult,\n} from '@webui-one/core/jsonrpc';\nimport * as actionTypes from './actionTypes';\n\nexport const getAlarmsStartAction = () => ({\n    type: actionTypes.GET_ALARMS_START,\n});\nexport const getAlarmsCompleteAction = (alarmList, selection) => {\n    const results = zipQueryResult(selection, alarmList.results);\n    return {\n        type: actionTypes.GET_ALARMS_COMPLETE,\n        alarmList: { ...alarmList, results },\n    };\n};\nexport const getAlarmsErrorAction = error => ({\n    type: actionTypes.GET_ALARMS_ERROR,\n    error,\n});\n\nexport const getAlarmSummaryStartAction = () => ({\n    type: actionTypes.GET_ALARM_SUMMARY_START,\n});\nexport const getAlarmSummaryCompleteAction = values => ({\n    type: actionTypes.GET_ALARM_SUMMARY_COMPLETE,\n    values,\n});\nexport const getAlarmSummaryErrorAction = error => ({\n    type: actionTypes.GET_ALARM_SUMMARY_ERROR,\n    error,\n});\n\nexport const getAlarms = ({\n    chunkSize,\n    offset,\n    columnKey,\n    sortorder,\n    severity,\n    funcs: {\n        query = _query,\n        getLastTh = _getLastTh,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        const contextNode = '/alarms/alarm-list';\n        const path = '/alarms/alarm-list/alarm';\n        const xpathExpr = `alarm[last-perceived-severity=\"${severity}\" and is-cleared=\"false\"]`;\n        const selection = [\n            'device',\n            'type',\n            'managed-object',\n            'last-perceived-severity',\n            'is-cleared',\n            'specific-problem',\n        ];\n        dispatch(getAlarmsStartAction(path));\n\n        try {\n            const th = await getLastTh();\n            const alarmList = await query({\n                th,\n                selection,\n                path,\n                sort: columnKey,\n                sortOrder: sortorder,\n                initialOffset: offset,\n                chunkSize,\n                resultAs: 'string',\n                xpathExpr,\n                contextNode,\n            });\n\n            return dispatch(getAlarmsCompleteAction(alarmList, selection));\n        } catch (error) {\n            return dispatch(getAlarmsErrorAction(error));\n        }\n    }\n);\n\nexport const getAlarmSummary = ({\n    funcs: {\n        getLastTh = _getLastTh,\n        getValues = _getValues,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        dispatch(getAlarmSummaryStartAction());\n\n        try {\n            const path = '/alarms/summary/';\n            const leafs = [\n                'criticals',\n                'majors',\n                'minors',\n                'warnings',\n                'indeterminates',\n            ];\n\n            const th = await getLastTh();\n            const result = await getValues({ th, path, leafs });\n            const alarmSummary = result.values.reduce((acc, cur, idx) => {\n                acc[leafs[idx]] = cur.value;\n                return acc;\n            }, {});\n\n            return dispatch(getAlarmSummaryCompleteAction(alarmSummary));\n        } catch (error) {\n            return dispatch(getAlarmSummaryErrorAction(error));\n        }\n    }\n);\n","import { createSelector } from 'reselect';\n\nconst emptyObject = Object.freeze({});\nconst emptyArray = Object.freeze([]);\n\nexport const selectAlarmList = state => (state.alarms.alarms || emptyObject);\nexport const selectAlarmListIsLoading = createSelector(\n    selectAlarmList,\n    alarmList => (alarmList ? alarmList.isLoading : true),\n);\nexport const selectAlarmListResult = createSelector(\n    selectAlarmList,\n    alarmList => (Array.isArray(alarmList.results) ? alarmList.results : emptyArray),\n);\nexport const selectAlarmSummary = state => (state.alarms.summary || emptyObject);\nexport const selectAlarmSummaryIsLoading = createSelector(\n    selectAlarmSummary,\n    summary => (summary ? summary.isLoading : true),\n);\nexport const selectAlarmSummaryResults = createSelector(\n    selectAlarmSummary,\n    summary => (summary ? summary.summary : emptyArray),\n);\n","import * as style from '@webui-one/styles/ApplicationDefaultStyles';\n\nexport default {\n    customContent: {\n        fontSize: style.huge1,\n        display: 'flex',\n        justifyContent: 'space-around',\n        margin: '-0.5rem 0.5rem -0.5rem -0.5rem',\n    },\n    alarmButton: {\n        color: style.color2,\n        borderRadius: '0.5rem',\n        padding: '0.5rem',\n        cursor: 'pointer',\n    },\n    criticals: style.color5,\n    majors: style.color15,\n    minors: style.color1,\n    warnings: style.color1,\n    indeterminates: style.color1,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport * as style from '@webui-one/styles/ApplicationDefaultStyles';\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport { isObject } from '@webui-one/core/utils/object';\nimport { getUserSessionsThunk } from 'modules/sessions/actions';\nimport {\n    selectIsLoading,\n    selectUserSessionCount,\n} from 'modules/sessions/selectors';\nimport {\n    subscribeMessageHandlerAction,\n    unsubscribeMessageHandlerAction,\n} from 'modules/comet/actions';\nimport { debounceFunction } from '@webui-one/core/utils/async';\nimport User from './static/User';\n\nclass SessionWidgetContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.callUpdate = debounceFunction({\n            milliseconds: 500,\n            waitWhileSpammed: true,\n        });\n    }\n\n    componentDidMount() {\n        const { onLoad, onSubscribe } = this.props;\n        onSubscribe(this.onCometUpdate);\n        onLoad();\n    }\n\n    componentWillUnmount() {\n        const { onUnsubscribe } = this.props;\n        onUnsubscribe(this.onCometUpdate);\n    }\n\n    onCometUpdate(message) {\n        const { onLoad } = this.props;\n        if (isObject(message) && (\n            message.new_user !== undefined ||\n            message.del_user !== undefined\n        )) {\n            this.callUpdate(onLoad);\n        }\n    }\n\n    render() {\n        const { items, isLoading } = this.props;\n        const value = items.reduce((acc, item) => acc + item.value, 0);\n\n        return (<DataWidget\n            items={items}\n            symbol={<User color={style.textColor3} />}\n            name=\"user-sessions\"\n            title={'USER SESSIONS'}\n            isLoading={isLoading}\n            >{value}</DataWidget>);\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        return dispatch(getUserSessionsThunk());\n    },\n    onSubscribe(handler) {\n        dispatch(subscribeMessageHandlerAction(handler));\n    },\n    onUnsubscribe(handler) {\n        dispatch(unsubscribeMessageHandlerAction(handler));\n    },\n});\n\nSessionWidgetContainer.propTypes = {\n    items: PropTypes.arrayOf(Object),\n    onLoad: PropTypes.func.isRequired,\n    onSubscribe: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n    items: selectUserSessionCount(state),\n    isLoading: selectIsLoading(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(SessionWidgetContainer);\n\nexport {\n    SessionWidgetContainer as _SessionWidgetContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import jsonrpcSimple from '@webui-one/core/jsonrpc';\nimport { query as nodesQuery } from 'modules/nodes/actions';\nimport { delay } from '@webui-one/core/utils/async';\nimport * as actionTypes from './actionTypes';\nimport { USER_SESSIONS_PATH } from './paths';\n\n/*\n    Action creators.\n*/\nexport const setSessionSortOrderAction = (columnKey, isDesc) => ({\n    type: actionTypes.SESSION_SET_SORT_ORDER,\n    sortOrder: {\n        columnKey,\n        isDesc,\n    },\n});\n\nexport const getUserSessionsStartAction = () => ({\n    type: actionTypes.GET_USER_SESSIONS_START,\n});\n\nexport const getUserSessionsCompleteAction = result => ({\n    type: actionTypes.GET_USER_SESSIONS_COMPLETE,\n    result,\n});\n\nexport const getUserSessionsErrorAction = error => ({\n    type: actionTypes.GET_USER_SESSIONS_ERROR,\n    error,\n});\n\nexport const kickUserStartAction = sessionId => ({\n    type: actionTypes.KICK_USER_START,\n    sessionId,\n});\n\nexport const kickUserCompleteAction = sessionId => ({\n    type: actionTypes.KICK_USER_COMPLETE,\n    sessionId,\n});\n\nexport const kickUserErrorAction = (sessionId, error) => ({\n    type: actionTypes.KICK_USER_ERROR,\n    sessionId,\n    error,\n});\n\n/* Thunks */\nexport const getUserSessionsThunk = ({\n    funcs: {\n        query = nodesQuery,\n    } = {},\n} = {}) => (\n    (dispatch) => {\n        const selection = ['session-id', 'transport', 'username', 'source-host', 'login-time'];\n        dispatch(getUserSessionsStartAction());\n        return dispatch(query({ selection, path: USER_SESSIONS_PATH })).then(res => (\n            dispatch(getUserSessionsCompleteAction(res.result))\n        )).catch(err => (\n            dispatch(getUserSessionsErrorAction(err))\n        ));\n    }\n);\n\nexport const kickUserThunk = (\n    sessionId,\n    {\n        funcs: {\n            delayFunc = delay,\n            getUserSessions = getUserSessionsThunk,\n            jsonrpc = jsonrpcSimple,\n        } = {},\n    } = {},\n) => (\n    (dispatch) => {\n        dispatch(kickUserStartAction(sessionId));\n        return jsonrpc('kick_user', { user: Number.parseInt(sessionId, 10) })\n            .then(() =>\n                dispatch(kickUserCompleteAction(sessionId)),\n            )\n            .then(delayFunc(300))\n            .then(() =>\n                dispatch(getUserSessions()),\n            )\n            .catch(err =>\n                dispatch(kickUserErrorAction(sessionId, err)),\n            );\n    }\n);\n","import {\n    createSelector,\n    createSelectorCreator,\n    defaultMemoize,\n} from 'reselect';\nimport { isDeepEqual } from '@webui-one/core/utils/object';\nimport {\n    selectNode,\n    selectLoading,\n} from 'modules/nodes/selectors';\nimport {\n    sortRows,\n} from '@webui-one/core/utils/list';\nimport { USER_SESSIONS_PATH } from './paths';\n\nexport const selectUserSessionsNode = (state) => {\n    const node = selectNode(state, USER_SESSIONS_PATH);\n    if (!node) return undefined;\n    if (!node.rows) return undefined;\n    return node;\n};\n\nexport const selectUserSessions = createSelector(\n    selectUserSessionsNode,\n    (node) => {\n        if (!node) return undefined;\n        return node.rows.map(r => ({\n            'login-time': r['login-time'],\n            'session-id': r['session-id'],\n            'source-host': r['source-host'],\n            transport: r.transport,\n            username: r.username,\n        }));\n    },\n);\n\nexport const selectSessions = state => state.sessions;\nexport const selectSortOrder = state => (selectSessions(state) || {}).sortOrder;\nexport const selectKicked = state => (selectSessions(state) || {}).kicked;\n\nexport const selectIsLoading = state =>\n    selectLoading(state, USER_SESSIONS_PATH);\n\n// See Transport Identities in tailf-netconf-monitoring.yang\nexport const getTransportDescription = (transport) => {\n    switch (transport) {\n    case 'tncm:cli-console': return 'CLI on the console';\n    case 'tncm:cli-ssh': return 'CLI over SSH';\n    case 'tncm:cli-tcp': return 'CLI over TCP';\n    case 'tncm:webui-http': return 'WebUI over HTTP';\n    case 'tncm:webui-https': return 'WebUI over HTTPS';\n    case 'tncm:netconf-tcp': return 'NETCONF over TCP';\n    case 'tncm:snmp-udp': return 'SNMP over UDP';\n    case 'tncm:rest-http': return 'REST over HTTP';\n    case 'tncm:rest-https': return 'REST over HTTPS';\n    default: return transport;\n    }\n};\n\nexport const sessionsRowSelector = createSelectorCreator(defaultMemoize, isDeepEqual)(\n    selectUserSessions,\n    selectKicked,\n    (sessions, kicked) => {\n        if (!sessions || !kicked) return undefined;\n        return sessions.filter(s => !(s['session-id'] in kicked)).map((session) => {\n            const sessionId = session['session-id'];\n            const rowKey = sessionId;\n            return {\n                data: {\n                    ...session,\n                    kick: sessionId,\n                    transport: getTransportDescription(session.transport),\n                },\n                rowKey,\n            };\n        });\n    },\n);\n\nexport const orderedRowsSelector = createSelector(\n    sessionsRowSelector,\n    selectSortOrder,\n    (rows, sortOrder) => {\n        if (!rows) return undefined;\n        return sortRows(rows, sortOrder);\n    },\n);\n\nexport const selectUserSessionCount = createSelector(\n    selectUserSessions,\n    (sessions) => {\n        const userSessions = (sessions || []).reduce((acc, session) => {\n            const { username } = session;\n            const sum = username in acc ? acc[username] + 1 : 1;\n            return { ...acc, [username]: sum };\n        }, {});\n\n        return Object.keys(userSessions)\n            .map(name => ({ name, value: userSessions[name] }))\n            .sort((a, b) => b.value - a.value);\n    },\n);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ color }) =>\n    (<svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 23 23\"\n        xmlSpace=\"preserve\">\n        <path\n            fill={color}\n            d=\"M19.2,16.4l-4.9-2.9c-0.1-0.1-0.3-0.3-0.3-0.4l-0.6-1.3c0.8-0.6,1.2-2.5,1.2-3.5V6.2c0-1.7-1.3-3.2-3.1-3.2C9.8,3,8.4,4.4,8.4,6.2v2.1c0,1.1,0.4,2.9,1.2,3.5l-0.6,1.3c0,0.2-0.2,0.3-0.3,0.4l-4.9,2.9c-0.1,0.1-0.3,0.3-0.3,0.4l-0.4,2.7C3,19.7,3.2,20,3.5,20c0,0,0,0,0.1,0h15.9c0.3,0,0.5-0.2,0.5-0.5c0,0,0,0,0-0.1l-0.4-2.7C19.5,16.6,19.3,16.4,19.2,16.4z\" />\n    </svg>);\n\nUser.propTypes = {\n    color: PropTypes.string,\n};\n\nUser.defaultProps = {\n    color: 'red',\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport PercentageItem from 'Common/Components/DataWidget/PercentageItem';\nimport * as style from '@webui-one/styles/ApplicationDefaultStyles';\nimport { getServiceDeployments } from 'modules/services/actions';\nimport {\n    selectServiceDeployments,\n    selectServiceDeploymentCount,\n    selectServiceDeploymentsIsLoading,\n} from 'modules/services/selectors';\nimport { translate, Messages } from 'modules/intl';\nimport { ensureNumber } from '@webui-one/core/utils/number';\nimport Cloud from './static/Cloud';\n\nconst SERVICEDEPLOYMENT = Messages.DASHBOARD.SERVICEDEPLOYMENT;\n\nconst percentage = (value, total) => Math.round(((value / total) || 0) * 100);\nexport const deploymentPercentage = (count, total) => {\n    const value = ensureNumber(count);\n    return (\n        <PercentageItem\n            value={value}\n            percentage={percentage(value, total)}\n        />\n    );\n};\n\nconst getItems = (runningTotal, completedTotal, deployments, isLoading) => (\n    isLoading\n        ? []\n        : [\n            {\n                name: translate(SERVICEDEPLOYMENT.RUNNING),\n                value: deploymentPercentage(deployments.running),\n            },\n            {\n                name: translate(SERVICEDEPLOYMENT.JEOPARDIZED),\n                value: deploymentPercentage(deployments.jeopardized, runningTotal),\n            },\n            {\n                name: translate(SERVICEDEPLOYMENT.VIOLATED),\n                value: deploymentPercentage(deployments.violated, completedTotal),\n            },\n            {\n                name: translate(SERVICEDEPLOYMENT.SUCCESSFUL),\n                value: deploymentPercentage(deployments.successful, completedTotal),\n            },\n        ]\n);\n\nclass ServiceDeploymentWidgetContainer extends React.Component {\n    // eslint-disable-next-line camelcase, react/sort-comp\n    UNSAFE_componentWillMount() {\n        const { onLoad } = this.props;\n        onLoad();\n    }\n\n    render() {\n        const { count, deployments, isLoading } = this.props;\n        const runningTotal = ensureNumber(deployments.running) +\n                             ensureNumber(deployments.jeopardized);\n        const completedTotal = ensureNumber(deployments.successful) +\n                               ensureNumber(deployments.violated);\n\n        return (<DataWidget\n            items={getItems(runningTotal, completedTotal, deployments, isLoading)}\n            symbol={<Cloud color={style.textColor3} />}\n            name=\"service-deployments\"\n            title={translate(SERVICEDEPLOYMENT.TITLE)}\n            isLoading={isLoading}\n            >{count}</DataWidget>);\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        return dispatch(getServiceDeployments());\n    },\n});\n\nServiceDeploymentWidgetContainer.propTypes = {\n    count: PropTypes.number,\n    deployments: PropTypes.shape({\n        jeopardized: PropTypes.number,\n        ontime: PropTypes.number,\n        running: PropTypes.number,\n        successful: PropTypes.number,\n        violated: PropTypes.number,\n    }),\n    onLoad: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n    count: selectServiceDeploymentCount(state),\n    deployments: selectServiceDeployments(state),\n    isLoading: selectServiceDeploymentsIsLoading(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ServiceDeploymentWidgetContainer);\n\nexport {\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n    ServiceDeploymentWidgetContainer as _ServiceDeploymentWidgetContainer,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ensureNumber } from '@webui-one/core/utils/number';\n\nimport style from './DataWidgetStyles';\n\nconst PercentageItem = ({ percentage, value }) => (\n    <span data-handle=\"percentage-item\">\n        <span data-handle=\"percentage-item-value\">{value}</span>\n        {ensureNumber(percentage) > 0 &&\n            <span\n                data-handle=\"percentage-item-percentage\"\n                style={style.percentageItem.percentage}\n            >\n                ({percentage}%)\n            </span>\n        }\n    </span>\n);\n\nPercentageItem.propTypes = {\n    value: PropTypes.number,\n    percentage: PropTypes.number,\n};\n\n\nexport default PercentageItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cloud = ({ color }) =>\n    (<svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 23 23\"\n        xmlSpace=\"preserve\">\n        <path\n            id=\"icon_x2F_Deploy\"\n            fill={color}\n            d=\"M14,19.5V16h2c0.1,0,0.2,0,0.3-0.1c0.2-0.2,0.3-0.5,0.1-0.7l-3.6-4.7c-0.1-0.1-0.1-0.1-0.2-0.2c-0.4-0.3-1.1-0.3-1.4,0.2l-3.6,4.7c-0.1,0.1-0.1,0.2-0.1,0.3C7.5,15.8,7.7,16,8,16h2v3.5H3.5c-2.2-0.1-4-2-4-4.2s1.8-4.1,4.1-4.2c-0.1-0.1-0.1-0.4-0.1-0.5c0-2.2,1.8-4,4-4c0.7,0,1.3,0.2,1.9,0.4c0.7-2,2.6-3.4,4.9-3.4c2.9,0,5.2,2.3,5.2,5.2v0.4c2.3,0.6,4,2.6,4,5.1c0,2.9-2.2,5.1-5,5.2H14z\" />\n    </svg>);\n\nCloud.propTypes = {\n    color: PropTypes.string,\n};\n\nCloud.defaultProps = {\n    color: 'red',\n};\n\nexport default Cloud;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport * as style from '@webui-one/styles/ApplicationDefaultStyles';\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport { getLinkWithPath } from 'ServiceManager';\nimport { getServiceInstanceCount } from 'modules/services/actions';\nimport {\n    selectServiceInstanceCountIsLoading,\n    selectServiceCountTotal,\n    selectServiceCountByType,\n    selectServicePointsKeypaths,\n} from 'modules/services/selectors';\nimport {\n    subscribeChangesAction,\n    unsubscribeChangesAction,\n} from 'modules/comet/actions';\nimport * as nodesActionTypes from 'modules/nodes/actionTypes';\nimport {\n    ipcSubscribeAction,\n    ipcUnsubscribeAction,\n} from 'modules/ipc/actions';\nimport { stripListKeys } from '@webui-one/core/utils/path';\nimport { debounceFunction } from '@webui-one/core/utils/async';\nimport Terminal from './static/Terminal';\n\nclass ServiceInstancesWidgetContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.onIpcUpdate = this.onIpcUpdate.bind(this);\n        this.callGetServices = debounceFunction({\n            milliseconds: 500,\n            waitWhileSpammed: true,\n        });\n    }\n\n    // eslint-disable-next-line camelcase, react/sort-comp\n    UNSAFE_componentWillMount() {\n        const {\n            onLoad,\n            onSubscribe,\n            onSubscribeIpc,\n            servicePoints,\n        } = this.props;\n        if (servicePoints.length > 0) {\n            onSubscribe(servicePoints, this.onCometUpdate);\n        }\n        onLoad();\n        onSubscribeIpc(this.onIpcUpdate);\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            servicePoints: prevPoints,\n        } = prevProps;\n        const {\n            onSubscribe,\n            onUnsubscribe,\n            servicePoints,\n        } = this.props;\n        const toRemove = prevPoints\n            .filter(point => !servicePoints.includes(point));\n        const toAdd = servicePoints\n            .filter(point => !prevPoints.includes(point));\n        if (toAdd.length > 0) {\n            onSubscribe(toAdd, this.onCometUpdate);\n        }\n        if (toRemove.length > 0) {\n            onUnsubscribe(toRemove, this.onCometUpdate);\n        }\n    }\n\n    componentWillUnmount() {\n        const {\n            onUnsubscribe,\n            onUnsubscribeIpc,\n            servicePoints,\n        } = this.props;\n        if (servicePoints.length > 0) {\n            onUnsubscribe(servicePoints, this.onCometUpdate);\n        }\n        onUnsubscribeIpc(this.onIpcUpdate);\n    }\n\n    onCometUpdate(notification) {\n        const { onLoad, servicePoints } = this.props;\n        const points = servicePoints;\n        const operations = ['created', 'deleted'];\n        const shouldUpdateServices = notification.changes\n            .some(({ op, keypath }) => (\n                operations.includes(op) &&\n                    points.find(point => keypath.startsWith(point))\n            ), false);\n        if (shouldUpdateServices) {\n            this.callGetServices(onLoad);\n        }\n    }\n\n    onIpcUpdate(message) {\n        const { onLoad, servicePoints } = this.props;\n        const messagePath = stripListKeys(message.path);\n        const servicePaths = Object.values(servicePoints);\n        if (servicePaths.includes(messagePath)) {\n            this.callGetServices(onLoad);\n        }\n    }\n\n    render() {\n        const { count, items, isLoading } = this.props;\n\n        const instances = items.map(item => ({\n            ...item,\n            path: getLinkWithPath(item.servicePoint),\n        }));\n\n        return (<DataWidget\n            items={instances}\n            symbol={<Terminal color={style.textColor3} />}\n            name=\"service-instances\"\n            title={'SERVICE INSTANCES'}\n            isLoading={isLoading}\n            >{count}</DataWidget>);\n    }\n}\n\nconst actionTypes = [\n    nodesActionTypes.CREATE,\n    nodesActionTypes.DELETE,\n];\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        return dispatch(getServiceInstanceCount());\n    },\n    onSubscribe(paths, handler) {\n        dispatch(subscribeChangesAction(paths, handler));\n    },\n    onSubscribeIpc(handler) {\n        dispatch(ipcSubscribeAction(handler, actionTypes));\n    },\n    onUnsubscribe(paths, handler) {\n        dispatch(unsubscribeChangesAction(paths, handler));\n    },\n    onUnsubscribeIpc(handler) {\n        dispatch(ipcUnsubscribeAction(handler));\n    },\n});\n\nServiceInstancesWidgetContainer.propTypes = {\n    count: PropTypes.number,\n    items: PropTypes.arrayOf(Object),\n    onLoad: PropTypes.func.isRequired,\n    onSubscribe: PropTypes.func.isRequired,\n    onSubscribeIpc: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    onUnsubscribeIpc: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n    router: PropTypes.shape({}),\n    servicePoints: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst mapStateToProps = state => ({\n    count: selectServiceCountTotal(state),\n    items: selectServiceCountByType(state),\n    isLoading: selectServiceInstanceCountIsLoading(state),\n    servicePoints: selectServicePointsKeypaths(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ServiceInstancesWidgetContainer);\n\nexport {\n    ServiceInstancesWidgetContainer as _ServiceInstancesWidgetContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Terminal = ({ color }) =>\n    (<svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        id=\"Layer_1\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 23 23\"\n        xmlSpace=\"preserve\">\n        <path\n            id=\"Combined-Shape\"\n            fill={color}\n            d=\"M19.4,3H3.6C3,3,2.5,3.5,2.5,4.1v10.6c0,0.6,0.5,1.1,1.1,1.1h15.9c0.6,0,1.1-0.5,1.1-1.1V4.1C20.5,3.5,20,3,19.4,3L19.4,3z M18.4,13.6H4.6V5.1h13.8V13.6z M15.5,18.4c0.4,0,0.8,0.4,0.8,0.8S15.9,20,15.5,20H7.5c-0.4,0-0.8-0.4-0.8-0.8s0.4-0.8,0.8-0.8l4-0.5L15.5,18.4z\" />\n    </svg>);\n\nTerminal.propTypes = {\n    color: PropTypes.string,\n};\n\nTerminal.defaultProps = {\n    color: 'red',\n};\n\nexport default Terminal;\n","import * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nexport default {\n    application: {\n        ...defaultStyles.application,\n        height: '100vh',\n        display: 'flex',\n        flexFlow: 'column',\n        backgroundImage: defaultStyles.pattern2,\n    },\n    scrollingContainer: {\n        overflow: 'auto',\n        flexGrow: '1',\n    },\n    widgetsContainer: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxWidth: defaultStyles.maxWidth,\n        margin: '0 auto',\n    },\n};\n\nexport {\n};\n"],"sourceRoot":""}
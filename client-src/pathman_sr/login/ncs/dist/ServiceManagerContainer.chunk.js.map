{"version":3,"sources":["webpack:///./src/ServiceManager/ServiceManagerContainer.jsx","webpack:///./src/modules/services/actions.js","webpack:///./src/ServiceManager/ServiceManagerStyles.js","webpack:///./src/ServiceManager/ServiceManager.jsx","webpack:///./src/ServiceManager/ServiceBatchActions.jsx","webpack:///./src/ServiceManager/ServiceListContainer.jsx","webpack:///./src/ServiceManager/ServicePointContainer.jsx","webpack:///./src/ServiceManager/AddRemoveServiceContainer.jsx","webpack:///./src/ServiceManager/AddServiceButton.jsx","webpack:///./src/ServiceManager/RemoveServiceButton.jsx","webpack:///./src/ServiceManager/ServiceCounter.jsx","webpack:///./src/ServiceManager/ServiceSearchContainer.jsx","webpack:///./src/Common/Components/Search/Search.jsx","webpack:///./src/Common/Components/Search/SearchStyles.jsx","webpack:///./src/ServiceManager/ServiceColumnsContainer.jsx"],"names":["ServiceManagerContainer","React","Component","componentDidMount","this","props","lastService","onSetLastService","path","render","defaultProps","propTypes","PropTypes","string","func","mapStateToProps","state","ownProps","routeParams","splat","selectLastService","mapDispatchToProps","dispatch","servicePoint","setLastServiceAction","connect","withRouter","getServicesStartAction","type","actionTypes","SERVICES_GET_START","getServicesCompleteAction","SERVICES_GET_COMPLETE","getServicesErrorAction","error","SERVICES_GET_ERROR","isSelected","names","SERVICES_SELECT","getServiceDeploymentsAction","deployments","SERVICE_DEPLOYMENTS_GET","getServiceDeploymentsStartAction","SERVICE_DEPLOYMENTS_GET_START","getServiceDeploymentsErrorAction","SERVICE_DEPLOYMENTS_GET_ERROR","getServiceInstanceCountStartAction","SERVICE_INSTANCE_COUNT_GET_START","getServiceInstanceCountAction","count","SERVICE_INSTANCE_COUNT_GET","getServiceInstanceCountErrorAction","SERVICE_INSTANCE_COUNT_GET_ERROR","getServicePointsAction","action","SERVICE_POINTS_GET","SERVICE_SET_LAST_SERVICE","getServicePointSchemasCompleteAction","schemas2","types","GET_SERVICE_POINT_SCHEMAS_COMPLETE","column","isExpanded","SET_EXPANDED_ROW","value","SET_SEARCH","getServicePoints","funcs","jsonrpc","jsonrpcSimple","dispatchSchemas","schemaResults","schemas","paths","responses","zipObject","getSchemasFromResponses","getTypesFromResponses","getServicePointsSchemas","servicePoints","getSchemas","_getSchemas","getLastTh","_getLastTh","dispatchSchemasFunc","async","Object","keys","map","key","th","schema","S","getKeys","result","keypath","base","getServiceList","offset","chunkSize","sortColumn","sortOrder","query","_query","getState","searchString","selectServiceSearch","predicates","isNonEmptyArray","k","join","xpathExpr","selection","sort","initialOffset","result_as","contextNode","undefined","getServicePointsAndSchemas","getServicePointsFunc","getServicePointsSchemasFunc","service_points","filteredSchemas","filter","s","isAccessDenied","filteredServicePoints","reduce","acc","getServicePointsAndSchemasFunc","getServiceListFunc","getGlobalApplicationSettingFunc","getGlobalApplicationSetting","setting","ACTION_STATUS_INDICATOR_TIMEOUT","currentServicePointResult","r","isNonEmptyString","Promise","all","e","parseDeploymentTriggers","triggers","tr","status","violated","jeopardized","running","successful","readThunk","read","then","xpath_expr","results","zipQueryResult","catch","getCount","res","isPresenceContainer","toNumber","exists","flatten","ensureArray","shift","resultToInstanceCount","idx","name","requestServiceCounts","filteredResults","requests","method","params","constructCountContainerServicesRequest","initial_offset","chunk_size","constructCountListServicesRequest","countServices","batch","jsonrpcBatch","serviceCounter","selectServiceInstanceCountIsLoading","resolve","err","servicePath","runCustomActionThunk","_runCustomActionThunk","executePath","getPaths","application","defaultStyles","height","display","flexFlow","backgroundImage","pattern1","scrollingContainer","overflow","flexGrow","secondHeader","backgroundColor","color11","borderTop","justifyContent","alignItems","contentWrapper","maxWidth","margin","padding","contentRightSide","marginLeft","menuArrow","width","top","left","transform","position","menuArrowDisplaced","button","border","transition","popDownMenu","container","alignSelf","marginRight","cursor","disabled","color","pop","menuArrowShadow","boxShadow","wrapper","header","marginBottom","labelsMenu","labelImage","opacity","labelContainer","label","textOverflow","deleteLabel","flexShrink","createContainer","marginTop","deleteImage","input","fontSize","text","medium3","whiteSpace","color13","serviceButton","addServiceButton","removeServiceButton","ServiceManager","style","additionalComponentsRight","shadow","serviceList","onAction","runServiceActionThunk","rows","selectSelectedServiceRows","actions","SERVICE_ACTIONS","BatchActions","SERVICE_CHUNK_SIZE","STYLE_NAME","list","to","rowKey","data-handle","cell","buttonWrapper","Link","link","translate","createButtonCellFactory","onExpand","btnStyle","actionIndicatorTimeout","pathOr","completedAt","yangAction","createPlanButtonCellFactory","row","data","expandable","planIsExpanded","buttonStyles","planButton","planButtonActive","onClick","planButtonIconActive","planButtonIcon","color3","createPlanCell","createExpandCell","columnData","createResultCellFactory","getEmptyText","isString","getEmptyHandle","ServiceListContainer","constructor","super","onRunAction","bind","onSelectAllRows","onSelectRow","onChangeSortOrder","onGoToPage","handleExpand","showModal","formIsValid","onLoad","componentDidUpdate","prevPoint","prevSearch","search","totalNumberOfResults","length","Math","max","onSelectRows","hasSelectedAll","setState","columnKey","isLoading","newSortorder","newColumnKey","newColumn","find","shouldIncludPlanColumn","services","sortOrdering","columnsVisibility","columns","isDesc","createHeader","createSortableHeaderFactory","getDefaultColumn","canBeHidden","isSticky","title","createEmptyHeaderFactory","createCell","createDirtyCellFactory","createCheckboxHeaderFactory","createCheckBoxCellFactory","createKeyCellFactory","CONFIGURATION_EDITOR_NAME","splice","createHeaderFactory","found","styles","actionButton","COLUMNS_ACTION","forEach","push","c","isVisibleColumn","filluppColumn","isExpandable","additionalElements","empty","unit","keyword","styleName","LinkComponent","shouldPadRows","shouldRetainColumnsSize","nrOfStaticColumns","bool","isRequired","arrayOf","number","shape","selectServiceIsLoading","selectGlobalSettingsIsLoading","selectServiceColumns","servicePointsSelector","sp","getServicePoint","lstrip","getLinkWithPath","selectServiceIncludesPlan","selectServiceOffset","selectServiceRows","selectServiceSortColumn","selectServiceSortOrder","selectTotalNumberOfServices","selectGlobalSetting","setServiceExpandedAction","getServices","selectServiceAction","servicePointSorter","a","b","textA","valueA","textB","valueB","valueCompare","localeCompare","textCompare","servicePointFilter","entryToOption","getSortedOptions","points","entries","getValue","ServicePointContainer","onChange","router","servicePointStyle","editable","onSetValue","options","placeholder","selectSchema","AddRemoveServiceContainer","onClose","onConfirm","onDeleteSelected","showAddServiceModal","errorOnCreate","items","onCreate","getKeyValue","selectedServices","onDeleteRows","addServiceIsDisabled","removeServiceIsDisabled","serviceButtonContainerStyle","selectCurrentSchema","columnChildren","getColumnChildren","selectExists","schemaIsLoaded","isSchemaLoaded","mergeProps","stateProps","dispatchProps","mergedProps","onQueryData","args","getQuerySelection","nodesActions","createPath","createDisallowExistsThunk","keyPaths","deleteNodesThunk","stl","AddServiceButton","addServiceButtonStyle","buttonDisabled","closeOnConfirm","RemoveServiceButton","removeServiceButtonStyle","ServiceCounter","showTooltip","hideTooltip","tooltip","show","hide","selected","total","direction","toolTipText","ref","tt","role","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","selectServiceCount","selectSelectedServiceCount","onSetSearch","setSearchAction","Search","useState","draft","setDraft","setSearch","event","target","trim","useEffect","onBlur","onKeyDown","borderRadius","paddingLeft","ServiceColumnsContainer","onSetColumnVisible","SERVICE_COLUMNS","index","isVisible","SERVICE_MANAGER_USER_STORAGE_PATH","enabled","setColumnVisibilityAction"],"mappings":"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","file":"ServiceManagerContainer.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport {\n    selectLastService,\n} from 'modules/services/selectors';\nimport {\n    setLastServiceAction,\n} from 'modules/services/actions';\nimport ServiceManager from './ServiceManager';\n\nclass ServiceManagerContainer extends React.Component {\n    componentDidMount() {\n        const {\n            lastService,\n            onSetLastService,\n            path,\n        } = this.props;\n        if (path !== lastService) {\n            onSetLastService(path);\n        }\n    }\n\n    render() {\n        const { path } = this.props;\n        return <ServiceManager\n            path={path}\n        />;\n    }\n}\n\nServiceManagerContainer.defaultProps = {\n    path: '',\n};\n\nServiceManagerContainer.propTypes = {\n    lastService: PropTypes.string,\n    onSetLastService: PropTypes.func,\n    path: PropTypes.string,\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const routeParams = (ownProps && ownProps.routeParams) || {};\n    const { splat: path } = routeParams;\n    const lastService = selectLastService(state);\n    return {\n        lastService,\n        path,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onSetLastService(servicePoint) {\n        dispatch(setLastServiceAction(servicePoint));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withRouter(ServiceManagerContainer));\n\nexport {\n    ServiceManagerContainer as _ServiceManagerContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import * as S from '@webui-one/core/schema';\nimport * as actionTypes from 'modules/services/actionTypes';\nimport jsonrpcSimple, {\n    getSchemas as _getSchemas,\n    getLastTh as _getLastTh,\n    jsonrpcBatch,\n    zipQueryResult,\n} from '@webui-one/core/jsonrpc';\nimport {\n    ensureArray,\n    flatten,\n    zipObject,\n    isNonEmptyArray,\n} from '@webui-one/core/utils/array';\nimport { toNumber } from '@webui-one/core/utils/number';\nimport { isNonEmptyString } from '@webui-one/core/utils/string';\nimport { query as _query } from 'modules/nodes/actions';\nimport {\n    read,\n} from 'modules/transactions/actions';\nimport {\n    getSchemasFromResponses,\n    getTypesFromResponses,\n} from 'modules/schemas2/actions';\nimport {\n    selectServiceInstanceCountIsLoading,\n    selectServiceSearch,\n} from './selectors';\nimport {\n    runCustomActionThunk as _runCustomActionThunk,\n} from 'modules/yangActions/actions';\nimport {\n    getGlobalApplicationSetting,\n    ACTION_STATUS_INDICATOR_TIMEOUT,\n} from 'modules/globalSettings/actions';\n\nexport const getServicesStartAction = () => ({\n    type: actionTypes.SERVICES_GET_START,\n});\n\nexport const getServicesCompleteAction = () => ({\n    type: actionTypes.SERVICES_GET_COMPLETE,\n});\n\nexport const getServicesErrorAction = error => ({\n    type: actionTypes.SERVICES_GET_ERROR,\n    error,\n});\n\n\nexport const selectServiceAction = (isSelected, names) => ({\n    type: actionTypes.SERVICES_SELECT,\n    names,\n    isSelected,\n});\n\nexport const getServiceDeploymentsAction = deployments => ({\n    type: actionTypes.SERVICE_DEPLOYMENTS_GET,\n    deployments,\n});\n\nexport const getServiceDeploymentsStartAction = () => ({\n    type: actionTypes.SERVICE_DEPLOYMENTS_GET_START,\n});\n\nexport const getServiceDeploymentsErrorAction = () => ({\n    type: actionTypes.SERVICE_DEPLOYMENTS_GET_ERROR,\n});\n\nexport const getServiceInstanceCountStartAction = () => ({\n    type: actionTypes.SERVICE_INSTANCE_COUNT_GET_START,\n});\n\nexport const getServiceInstanceCountAction = count => ({\n    type: actionTypes.SERVICE_INSTANCE_COUNT_GET,\n    count,\n});\n\nexport const getServiceInstanceCountErrorAction = error => ({\n    type: actionTypes.SERVICE_INSTANCE_COUNT_GET_ERROR,\n    error,\n});\n\nexport const getServicePointsAction = action => ({\n    type: actionTypes.SERVICE_POINTS_GET,\n    ...action,\n});\n\nexport const setLastServiceAction = lastService => ({\n    type: actionTypes.SERVICE_SET_LAST_SERVICE,\n    lastService,\n});\n\nexport const getServicePointSchemasCompleteAction = (schemas2, types) => ({\n    type: actionTypes.GET_SERVICE_POINT_SCHEMAS_COMPLETE,\n    schemas2,\n    types,\n});\n\nexport const setServiceExpandedAction = (path, column, isExpanded) => ({\n    type: actionTypes.SET_EXPANDED_ROW,\n    path,\n    column,\n    isExpanded,\n});\n\nexport const setSearchAction = value => ({\n    type: actionTypes.SET_SEARCH,\n    value,\n});\n\nexport const getServicePoints = ({\n    funcs: {\n        jsonrpc = jsonrpcSimple,\n    } = {},\n} = {}) => (\n    jsonrpc('get_service_points', {})\n);\n\nconst dispatchSchemas = ({\n    dispatch,\n    schemas: schemaResults,\n    paths,\n}) => {\n    const responses = zipObject(paths, schemaResults);\n    const schemas2 = getSchemasFromResponses(responses);\n    const types = getTypesFromResponses(schemaResults);\n    dispatch(getServicePointSchemasCompleteAction(schemas2, types));\n};\n\nconst getServicePointsSchemas = (\n    servicePoints, {\n        funcs: {\n            getSchemas = _getSchemas,\n            getLastTh = _getLastTh,\n            dispatchSchemasFunc = dispatchSchemas,\n        } = {},\n    } = {},\n) => (\n    async (dispatch) => {\n        const paths = Object.keys(servicePoints).map(key => (servicePoints[key]));\n        const th = await getLastTh();\n        const schemas = await getSchemas({ th, paths });\n\n        dispatchSchemasFunc({ dispatch, schemas, paths });\n\n        return schemas.map(schema => ({\n            keys: S.getKeys(schema.result),\n            schema: schema.result,\n            path: S.keypath(schema.result),\n            base: S.keypath(schema.result),\n        }));\n    }\n);\n\nconst getServiceList =\n    (result, offset, chunkSize, sortColumn, sortOrder, {\n        funcs: {\n            query = _query,\n        } = {},\n    } = {}) =>\n        (dispatch, getState) => {\n            const searchString = selectServiceSearch(getState());\n            const { keys } = result;\n            const predicates = searchString && isNonEmptyArray(keys) ? `[${result.keys.map((k => `contains(${k}, \"${searchString}\")`)).join(' or ')}]` : '';\n            const xpathExpr = `${result.base}${predicates}`;\n            return dispatch(\n                query({\n                    selection: [...result.keys, 'count(device-list)'],\n                    path: result.base,\n                    sort: sortColumn,\n                    sortOrder,\n                    initialOffset: offset,\n                    chunkSize,\n                    result_as: 'string',\n                    xpathExpr,\n                    contextNode: undefined,\n                }),\n            );\n        };\n\n\nexport const getServicePointsAndSchemas = ({\n    funcs: {\n        getServicePointsFunc = getServicePoints,\n        getServicePointsSchemasFunc = getServicePointsSchemas,\n    } = {},\n} = {}) =>\n    async (dispatch) => {\n        const { service_points: servicePoints } = await getServicePointsFunc();\n\n        const schemas = await dispatch(getServicePointsSchemasFunc(servicePoints));\n        const filteredSchemas = schemas.filter(s => !S.isAccessDenied(s.schema));\n        const filteredServicePoints = filteredSchemas.reduce((acc, s) =>\n            ({ ...acc, [s.path]: s.path }),\n        {});\n        dispatch(getServicePointsAction({ service_points: filteredServicePoints }));\n        return filteredSchemas;\n    };\n\nexport const getServices = ({\n    servicePoint,\n    offset,\n    chunkSize,\n    sortColumn,\n    sortOrder,\n    funcs: {\n        getServicePointsAndSchemasFunc = getServicePointsAndSchemas,\n        getServiceListFunc = getServiceList,\n        getGlobalApplicationSettingFunc = getGlobalApplicationSetting,\n    } = {},\n} = {}) => async (dispatch) => {\n    dispatch(getServicesStartAction());\n    try {\n        await dispatch(getGlobalApplicationSettingFunc({\n            setting: ACTION_STATUS_INDICATOR_TIMEOUT,\n        }));\n        const results = await dispatch(getServicePointsAndSchemasFunc());\n        const currentServicePointResult = results.filter(r => (\n            r.path === servicePoint || !isNonEmptyString(servicePoint)\n        ));\n        await Promise.all(currentServicePointResult.map(result =>\n            dispatch(getServiceListFunc(result, offset, chunkSize, sortColumn, sortOrder))),\n        );\n        dispatch(getServicesCompleteAction());\n    } catch(e) {\n        dispatch(getServicesErrorAction(e));\n    }\n};\n\nconst parseDeploymentTriggers = triggers => triggers.reduce((acc, tr) => {\n    if (tr.status === 'violated') {\n        acc.violated += 1;\n    } else if (tr.status === 'jeopardized') {\n        acc.jeopardized += 1;\n    } else if (tr.status === 'running') {\n        acc.running += 1;\n    } else if (tr.status === 'successful') {\n        acc.successful += 1;\n    }\n    return acc;\n}, { running: 0, successful: 0, violated: 0, jeopardized: 0 });\n\nconst selection = [\n    'jeopardy-result', 'violation-result', 'status',\n];\n\nexport const getServiceDeployments = ({\n    funcs: {\n        readThunk = read,\n        jsonrpc = jsonrpcSimple,\n    } = {},\n} = {}) => (dispatch) => {\n    dispatch(getServiceDeploymentsStartAction());\n    return dispatch(readThunk()).then(({ th }) => jsonrpc('query', {\n        th,\n        selection,\n        xpath_expr: '//service-progress-monitoring/trigger-status',\n    }).then(results => dispatch(\n        getServiceDeploymentsAction(\n            parseDeploymentTriggers(\n                zipQueryResult(selection, results.results),\n            ),\n        )),\n    )).catch(() => dispatch(getServiceDeploymentsErrorAction()));\n};\n\nconst constructCountContainerServicesRequest = (path, th) => ({\n    method: 'exists',\n    params: { path, th },\n});\n\nconst constructCountListServicesRequest = (path, th) => ({\n    method: 'query',\n    params: {\n        path,\n        th,\n        selection: [`count(${path})`],\n        initial_offset: 0,\n        chunk_size: 1,\n        result_as: 'string',\n    },\n});\n\nconst getCount = (res, schema) => {\n    if (S.isPresenceContainer(schema)) {\n        // console.log('presence', res);\n        return toNumber(res.result.exists);\n    }\n    return toNumber(flatten(ensureArray(res && res.result.results)).shift());\n};\n\nconst resultToInstanceCount = results => res => res.reduce((acc, r, idx) => ({\n    ...acc,\n    [results[idx].path]: {\n        count: getCount(r, results[idx].schema),\n        name: S.name(results[idx].schema),\n        servicePoint: results[idx].path,\n    },\n}), {});\n\nconst requestServiceCounts = (results, th) => {\n    const filteredResults = results.filter(result => !S.isAccessDenied(result.schema));\n    const requests = filteredResults.map(result => (\n        S.isPresenceContainer(result.schema)\n            ? constructCountContainerServicesRequest(S.keypath(result.schema), th)\n            : constructCountListServicesRequest(S.keypath(result.schema), th)\n    ));\n    return {\n        filteredResults,\n        requests,\n    };\n};\n\nconst countServices = (\n    dispatch,\n    th,\n    {\n        funcs: {\n            batch = jsonrpcBatch,\n        } = {},\n    } = {},\n) => (results) => {\n    const { filteredResults, requests } = requestServiceCounts(results, th);\n    return batch({ requests })\n        .then(resultToInstanceCount(filteredResults))\n        .then(res => dispatch(getServiceInstanceCountAction(res)));\n};\n\nexport const getServiceInstanceCount = ({\n    funcs: {\n        getServicePointsAndSchemasFunc = getServicePointsAndSchemas,\n        readThunk = read,\n        serviceCounter = countServices,\n    } = {},\n} = {}) =>\n    (dispatch, getState) => {\n        if (selectServiceInstanceCountIsLoading(getState())) {\n            return Promise.resolve();\n        }\n\n        dispatch(getServiceInstanceCountStartAction());\n        return dispatch(readThunk()).then(({ th }) =>\n            dispatch(getServicePointsAndSchemasFunc()).then(\n                serviceCounter(dispatch, th),\n            ),\n        ).catch(err => (\n            dispatch(getServiceInstanceCountErrorAction(err))\n        ));\n    };\n\nconst getPaths = ({ action, servicePath }) => {\n    if (action === 're-deploy dry-run') {\n        return {\n            path: `${servicePath}/${action}`,\n            executePath: `${servicePath}/re-deploy`,\n        };\n    }\n    return { path: `${servicePath}/${action}` };\n};\n\nexport const runServiceActionThunk = ({\n    action,\n    servicePath,\n    funcs: {\n        runCustomActionThunk = _runCustomActionThunk,\n    } = {},\n}) => {\n    const { path, executePath } = getPaths({ action, servicePath });\n    return runCustomActionThunk({ action, path, executePath });\n};\n\n\nexport {\n    parseDeploymentTriggers as _parseDeploymentTriggers,\n    getServicePointsSchemas as _getServicePointsSchemas,\n    countServices as _countServices,\n    requestServiceCounts as _requestServiceCounts,\n    resultToInstanceCount as _resultToInstanceCount,\n    getServiceList as _getServiceList,\n};\n","import * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nconst rowStyle = {};\n\nexport default {\n    application: {\n        ...defaultStyles.application,\n        height: '100vh',\n        display: 'flex',\n        flexFlow: 'column',\n        backgroundImage: defaultStyles.pattern1,\n    },\n    scrollingContainer: {\n        overflow: 'auto',\n        flexGrow: '1',\n    },\n    secondHeader: {\n        backgroundColor: defaultStyles.color11,\n        borderTop: '1px solid #cccccc',\n        height: '50px',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n    },\n    contentWrapper: {\n        display: 'flex',\n        maxWidth: defaultStyles.maxWidth,\n        margin: '0 auto',\n        height: '100%',\n        padding: '0 1rem',\n        alignItems: 'center',\n    },\n    contentRightSide: {\n        marginLeft: 'auto',\n    },\n};\n\nconst menuArrow = {\n    width: '1.2rem',\n    height: '1.2rem',\n    top: '-0.5rem',\n    left: '5.2rem',\n    transform: 'rotate(43deg)',\n    backgroundColor: '#ffffff',\n    position: 'absolute',\n};\n\nconst menuArrowDisplaced = {\n    ...menuArrow,\n    left: '8.5rem',\n};\n\nconst button = {\n    border: 'none',\n    transition: 'all 100ms ease-out',\n    height: '1.5rem',\n    width: '5rem',\n    padding: '0.3rem',\n};\n\nconst popDownMenu = {\n    container: {\n        alignSelf: 'center',\n        marginRight: '1rem',\n        position: 'relative',\n    },\n    button: {\n        ...button,\n        cursor: 'pointer',\n        disabled: {\n            ...button,\n            color: 'rgb(154, 154, 154)',\n        },\n    },\n    pop: {\n        position: 'absolute',\n        left: '-4rem',\n        top: '2.4rem',\n    },\n    menuArrow,\n    menuArrowShadow: {\n        ...menuArrow,\n        boxShadow: 'rgb(136, 136, 136) 0px 0px 3px 0px',\n    },\n    wrapper: {\n        position: 'absolute',\n        width: '9.2rem',\n        backgroundColor: 'white',\n        padding: '1rem',\n        boxShadow: 'rgb(136, 136, 136) 0px 0px 3px 0px',\n        color: '#333333',\n    },\n    header: {\n        marginBottom: '1rem',\n    },\n};\n\nconst labelsMenu = {\n    ...popDownMenu,\n    pop: {\n        position: 'absolute',\n        left: '-7rem',\n        top: '2.4rem',\n    },\n    menuArrow: {\n        ...menuArrowDisplaced,\n    },\n    menuArrowShadow: {\n        ...menuArrowDisplaced,\n        boxShadow: 'rgb(136, 136, 136) 0px 0px 3px 0px',\n    },\n    labelImage: {\n        width: '2rem',\n        disabled: {\n            width: '2rem',\n            opacity: 0.8,\n        },\n    },\n    labelContainer: {\n        display: 'flex',\n        margin: '0.25rem 0',\n    },\n    label: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        alignSelf: 'center',\n    },\n    deleteLabel: {\n        marginLeft: 'auto',\n        flexShrink: '0',\n        display: 'flex',\n        backgroundColor: '#ffffff',\n        border: 'none',\n        cursor: 'pointer',\n    },\n    createContainer: {\n        display: 'flex',\n        marginTop: '1rem',\n    },\n    deleteImage: {\n        width: '0.8rem',\n    },\n    input: {\n        fontSize: '1rem',\n        width: '7rem',\n    },\n    button: {\n        ...button,\n        padding: '0.35rem 1rem',\n    },\n};\n\nconst serviceCounter = {\n    wrapper: {\n        position: 'relative',\n        display: 'flex',\n        marginLeft: '1rem',\n    },\n    text: {\n        fontSize: defaultStyles.medium3,\n        whiteSpace: 'nowrap',\n    },\n};\n\nconst servicePoint = {\n    display: 'block',\n    border: `${defaultStyles.color13} 1px solid`,\n};\n\nconst serviceButtonContainer = {\n    display: 'flex',\n};\n\nconst serviceButton = {\n    justifyContent: 'center',\n    height: '1.5rem',\n    alignSelf: 'center',\n};\n\nconst addServiceButton = {\n    ...serviceButton,\n    marginLeft: '1rem',\n};\n\nconst removeServiceButton = {\n    ...serviceButton,\n};\n\nexport {\n    addServiceButton,\n    labelsMenu,\n    removeServiceButton,\n    rowStyle,\n    serviceButtonContainer,\n    serviceCounter,\n    servicePoint,\n};\n","import HeaderContainer from 'Common/Components/Header/HeaderContainer';\nimport FooterContainer from 'Common/Components/Footer/FooterContainer';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ServiceBatchActions from 'ServiceManager/ServiceBatchActions';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport ServiceListContainer from './ServiceListContainer';\nimport ServicePointContainer from './ServicePointContainer';\nimport AddRemoveServiceButtonContainer from './AddRemoveServiceContainer';\nimport ServiceCounter from './ServiceCounter';\nimport ServiceSearchContainer from './ServiceSearchContainer';\nimport ServiceColumnsContainer from './ServiceColumnsContainer';\nimport style from './ServiceManagerStyles';\n\nconst ServiceManager = ({ path }) => (\n    <div style={style.application}>\n        <HeaderContainer\n            additionalComponentsRight={[\n                <ServiceBatchActions path={path} />,\n            ]}\n        >\n            <div style={style.secondHeader}>\n                <div style={style.contentWrapper}>\n                    <ServicePointContainer path={path} />\n                    <AddRemoveServiceButtonContainer path={path} />\n                    <ServiceColumnsContainer path={path} />\n                    <ServiceCounter path={path} />\n                    <div style={style.contentRightSide}>\n                        <ServiceSearchContainer />\n                    </div>\n                </div>\n                <div style={defaultStyles.shadow} />\n            </div>\n        </HeaderContainer>\n        <div style={style.scrollingContainer}>\n            <ServiceListContainer style={style.serviceList} path={path} />\n        </div>\n        <FooterContainer />\n    </div>\n);\n\nServiceManager.propTypes = {\n    path: PropTypes.string,\n};\n\nexport default ServiceManager;\n","import { connect } from 'react-redux';\nimport { selectSelectedServiceRows } from 'modules/services/selectors';\nimport {\n    runServiceActionThunk,\n} from 'modules/services/actions';\nimport BatchActions from 'Common/Components/BatchActions/BatchActions';\nimport { SERVICE_ACTIONS } from 'modules/services/paths';\n\nconst mapDispatchToProps = dispatch => ({\n    onAction: (action, servicePath) => dispatch(runServiceActionThunk({ action, servicePath })),\n});\n\nconst mapStateToProps = (state, ownProps) => ({\n    rows: selectSelectedServiceRows(state, ownProps),\n    actions: SERVICE_ACTIONS,\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(BatchActions);\n\nexport {\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import List from '@webui-one/components/ConfigRender/List/List';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router';\nimport { connect } from 'react-redux';\nimport Pagination from '@webui-one/components/ConfigRender/List/Pagination';\nimport ActionButton from 'modules/yangActions/ActionButton';\nimport { isString, isNonEmptyString, lstrip } from '@webui-one/core/utils/string';\nimport { pathOr } from '@webui-one/core/utils/object';\nimport { CONFIGURATION_EDITOR_NAME } from 'ConfigurationEditor';\nimport {\n    createCheckBoxCellFactory,\n    createCheckboxHeaderFactory,\n    createHeaderFactory,\n    createKeyCellFactory,\n    createSortableHeaderFactory,\n    getDefaultColumn,\n    createDirtyCellFactory,\n    createEmptyHeaderFactory,\n} from '@webui-one/components/ConfigRender/List/ListCells';\nimport {\n    getServices,\n    getServicePointsAndSchemas,\n    runServiceActionThunk,\n    selectServiceAction,\n    setServiceExpandedAction,\n} from 'modules/services/actions';\nimport {\n    ACTION_STATUS_INDICATOR_TIMEOUT,\n} from 'modules/globalSettings/actions';\nimport {\n    selectGlobalSetting,\n    selectGlobalSettingsIsLoading,\n} from 'modules/globalSettings/selectors';\nimport {\n    selectServiceIncludesPlan,\n    selectServiceIsLoading,\n    selectServiceOffset,\n    selectServiceRows,\n    selectServiceSearch,\n    selectServiceSortColumn,\n    selectServiceSortOrder,\n    selectTotalNumberOfServices,\n    selectServiceColumns,\n    servicePointsSelector,\n} from 'modules/services/selectors';\nimport { createResultCellFactory } from 'modules/yangActions/ActionResult';\n\nimport { translate } from 'modules/intl';\nimport styles from '@webui-one/components/ConfigRender/List/ListStyles';\nimport { COLUMNS_ACTION } from 'modules/services/paths';\n\nimport PlanContainer from 'Common/Components/ConfigRender/Plan/PlanContainer';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport ActionButtonArrow from '@webui-one/components/ConfigRender/List/static/ActionButtonArrow';\n\nimport {\n    isVisibleColumn,\n} from '@webui-one/core/utils/list';\n\nimport Summary from 'Common/Components/Summary/Summary';\n\nimport { getLinkWithPath } from './index';\n\nconst SERVICE_CHUNK_SIZE = 50;\nconst STYLE_NAME = 'serviceList';\n\nconst style = styles(STYLE_NAME).list;\nconst createConfigurationCell = (to, key, rowKey) => (\n    <div data-handle={`cell-config-${rowKey}`} style={style.cell.buttonWrapper}>\n        <Link to={to} style={style.cell.link}>\n            {translate('servicemanager.config_button')}\n        </Link>\n    </div>\n);\n\nconst createButtonCellFactory = (action, onAction, onExpand, btnStyle, actionIndicatorTimeout) => (\n    (result, key, rowKey) => {\n        const status = pathOr(undefined, ['yangAction', 'status'], result);\n\n        return <ActionButton\n            style={btnStyle}\n            result={(result || {}).status}\n            status={status}\n            isExpanded={(result || {}).isExpanded}\n            path={rowKey}\n            action={action}\n            onExpand={onExpand}\n            onAction={onAction}\n            actionIndicatorTimeout={actionIndicatorTimeout}\n            completedAt={(result && result.yangAction) ? result.yangAction.completedAt : 0}\n        />;\n    }\n);\n\nconst createPlanButtonCellFactory = ({ onExpand }) => (to, key, rowKey, row) => {\n    const { isExpanded, column } = row.data.expandable;\n    const planIsExpanded = isExpanded && column === 'plan';\n    const buttonStyles = planIsExpanded ?\n        { ...style.cell.planButton, ...style.cell.planButtonActive } :\n        style.cell.planButton;\n\n    return (\n        <button\n            data-handle=\"plan-button\"\n            onClick={() => onExpand(rowKey, 'plan')}\n            style={buttonStyles}>\n        plan\n            <div style={\n                planIsExpanded ?\n                style.cell.planButtonIconActive : style.cell.planButtonIcon\n                }>\n                <ActionButtonArrow color={defaultStyles.color3}/>\n            </div>\n        </button>\n    );\n};\n\nconst createPlanCell = path => (\n    <div data-handle={`expanded-plan-${path}`} style={{ width: '100%' }}>\n        <PlanContainer\n            backgroundColor={defaultStyles.color3}\n            path={path}\n        />\n    </div>\n);\n\nconst createExpandCell = (...props) => {\n    const columnData = props[0];\n    if (!columnData.isExpanded) return false;\n\n    if (columnData.column === 'plan') {\n        const path = `${props[2]}/plan`;\n        return createPlanCell(path);\n    }\n\n    return createResultCellFactory()(...props);\n};\n\n\nconst getEmptyText = (servicePoint) => {\n    if (isNonEmptyString(servicePoint)) {\n        return 'No services in list';\n    }\n    if (isString(servicePoint)) {\n        return 'No service point selected';\n    }\n    return 'Invalid service point';\n};\n\nconst getEmptyHandle = (servicePoint) => {\n    if (isString(servicePoint)) {\n        return `empty-service-list-${servicePoint}`;\n    }\n    return 'invalid-service-point';\n};\n\nclass ServiceListContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onRunAction = this.onRunAction.bind(this);\n        this.onSelectAllRows = this.onSelectAllRows.bind(this);\n        this.onSelectRow = this.onSelectRow.bind(this);\n        this.onChangeSortOrder = this.onChangeSortOrder.bind(this);\n        this.onGoToPage = this.onGoToPage.bind(this);\n        this.handleExpand = this.handleExpand.bind(this);\n        this.state = {\n            showModal: false,\n            formIsValid: false,\n        };\n    }\n    componentDidMount() {\n        const { servicePoint } = this.props;\n        this.props.onLoad(servicePoint, 1);\n    }\n\n    componentDidUpdate({ servicePoint: prevPoint, search: prevSearch }) {\n        const {\n            offset,\n            rows,\n            search,\n            servicePoint,\n            totalNumberOfResults,\n        } = this.props;\n        if (servicePoint !== prevPoint || search !== prevSearch) {\n            this.props.onLoad(servicePoint, 1);\n        }\n        if (rows && rows.length === 0 && totalNumberOfResults > 0) {\n            this.onGoToPage(Math.max(1, offset - SERVICE_CHUNK_SIZE));\n        }\n    }\n\n    onRunAction(action, path) {\n        const { onAction } = this.props;\n        onAction(action, path);\n    }\n\n    onSelectRow(isSelected, rowKey) {\n        const { onSelectRows } = this.props;\n        onSelectRows(isSelected, [rowKey]);\n    }\n\n    onSelectAllRows(hasSelectedAll) {\n        const { rows, onSelectRows } = this.props;\n        this.setState({ hasSelectedAll });\n        onSelectRows(hasSelectedAll, rows.map(row => row.rowKey));\n    }\n\n    onChangeSortOrder(columnKey) {\n        const {\n            onLoad,\n            sortOrder,\n            sortColumn,\n            isLoading,\n            servicePoint,\n        } = this.props;\n\n        if (!isLoading) {\n            const isDesc = columnKey === sortColumn && sortOrder !== 'descending';\n            const isNone = columnKey === sortColumn && sortOrder === 'descending';\n            let newSortorder = 'ascending';\n            let newColumnKey = columnKey;\n            if (isDesc) newSortorder = 'descending';\n            if (isNone) {\n                newSortorder = undefined;\n                newColumnKey = undefined;\n            }\n\n            onLoad(servicePoint, 1, newColumnKey, newSortorder);\n        }\n    }\n\n    onGoToPage(offset) {\n        const {\n            isLoading,\n            onLoad,\n            sortOrder,\n            sortColumn,\n            servicePoint,\n        } = this.props;\n\n        if (!isLoading) {\n            onLoad(servicePoint, offset, sortColumn, sortOrder);\n        }\n    }\n\n    handleExpand(rowKey, newColumn) {\n        const { onExpand, rows } = this.props;\n        const row = rows.find(r => r.rowKey === rowKey);\n        const { isExpanded, column } = row.data.expandable;\n        const shouldExpand = (!isExpanded || newColumn !== column);\n        onExpand(rowKey, newColumn, shouldExpand);\n    }\n\n    render() {\n        const {\n            isLoading,\n            shouldIncludPlanColumn,\n            offset,\n            rows: services,\n            sortColumn,\n            sortOrder: sortOrdering,\n            totalNumberOfResults,\n            actionIndicatorTimeout,\n            columnsVisibility,\n            search,\n            servicePoint,\n        } = this.props;\n        const { hasSelectedAll } = this.state;\n        let columns = [];\n        const sortOrder = { columnKey: sortColumn, isDesc: sortOrdering === 'descending' };\n        const createHeader = createSortableHeaderFactory(this.onChangeSortOrder, sortOrder);\n        const nrOfStaticColumns = 2;\n\n        if (services.length > 0) {\n            columns = [\n                {\n                    ...getDefaultColumn(),\n                    key: 'isDirty',\n                    canBeHidden: false,\n                    isSticky: true,\n                    title: 'is dirty',\n                    createHeader: createEmptyHeaderFactory(STYLE_NAME),\n                    createCell: createDirtyCellFactory(STYLE_NAME),\n                },\n                {\n                    ...getDefaultColumn(),\n                    key: 'isSelected',\n                    canBeHidden: false,\n                    isSticky: true,\n                    title: 'is selected',\n                    createHeader: createCheckboxHeaderFactory(\n                        hasSelectedAll,\n                        this.onSelectAllRows,\n                        STYLE_NAME,\n                    ),\n                    createCell: createCheckBoxCellFactory(this.onSelectRow, STYLE_NAME),\n                }, {\n                    ...getDefaultColumn(),\n                    title: 'name',\n                    key: 'name',\n                    createHeader,\n                    createCell: createKeyCellFactory(CONFIGURATION_EDITOR_NAME, Link),\n                }, {\n                    ...getDefaultColumn(),\n                    title: 'devices',\n                    key: 'devices',\n                    createHeader,\n                },\n            ];\n\n            if (shouldIncludPlanColumn) {\n                columns.splice(-1, 0, {\n                    ...getDefaultColumn('plan'),\n                    key: 'plan',\n                    title: 'plan',\n                    createHeader: createHeaderFactory(\n                        'defaultStyle',\n                        style.header.found,\n                    ),\n                    createCell: createPlanButtonCellFactory({\n                        title: 'plan',\n                        onExpand: this.handleExpand,\n                        styles: style.cell.actionButton,\n                    }),\n                });\n            }\n\n            COLUMNS_ACTION.forEach(({ key }) => columns.push({\n                ...getDefaultColumn(key),\n                key,\n                title: key,\n                createHeader: createHeaderFactory(\n                    'defaultStyle',\n                    style.header.found,\n                ),\n                createCell: createButtonCellFactory(\n                    key,\n                    this.onRunAction,\n                    this.handleExpand,\n                    style.cell.actionButton,\n                    actionIndicatorTimeout,\n                ),\n            }));\n\n            columns = columns.filter(c => isVisibleColumn(columnsVisibility, c));\n\n            if (columns.length === nrOfStaticColumns) {\n                const filluppColumn = {\n                    ...getDefaultColumn('empty'),\n                    title: '',\n                };\n                columns.push(filluppColumn);\n            }\n\n            columns.push({\n                ...getDefaultColumn(),\n                title: 'expandable',\n                key: 'expandable',\n                canBeHidden: false,\n                isExpandable: true,\n                createHeader,\n                createCell: createExpandCell,\n            });\n        }\n\n        const additionalElements = [\n            totalNumberOfResults === 0 && <div\n                key=\"empty\"\n                style={style.empty}\n                data-handle={getEmptyHandle(servicePoint)}\n                >{getEmptyText(servicePoint)}</div>,\n            <Pagination\n                chunkSize={SERVICE_CHUNK_SIZE}\n                key=\"pagination\"\n                offset={offset}\n                onGoToPage={this.onGoToPage}\n                totalNumberOfResults={totalNumberOfResults}\n            />,\n        ];\n        return (<div>\n            {servicePoint && <Summary unit={`services in ${servicePoint}`} keyword={search}/>}\n            <List\n                columns={columns}\n                rows={services}\n                styleName=\"serviceList\"\n                isLoading={isLoading}\n                additionalElements={additionalElements}\n                chunkSize={SERVICE_CHUNK_SIZE}\n                LinkComponent={Link}\n                offset={offset}\n                shouldPadRows={false}\n                totalNumberOfResults={totalNumberOfResults}\n                shouldRetainColumnsSize={false}\n                nrOfStaticColumns={nrOfStaticColumns}\n            />\n        </div>);\n    }\n}\n\n\nServiceListContainer.propTypes = {\n    actionIndicatorTimeout: PropTypes.string,\n    isLoading: PropTypes.bool.isRequired,\n    shouldIncludPlanColumn: PropTypes.bool.isRequired,\n    onAction: PropTypes.func.isRequired,\n    onExpand: PropTypes.func,\n    onLoad: PropTypes.func.isRequired,\n    onSelectRows: PropTypes.func.isRequired,\n    rows: PropTypes.arrayOf(Object),\n    servicePoint: PropTypes.string,\n    sortOrder: PropTypes.string,\n    offset: PropTypes.number,\n    sortColumn: PropTypes.string,\n    totalNumberOfResults: PropTypes.number,\n    search: PropTypes.string,\n    columnsVisibility: PropTypes.shape(Object),\n};\n\nServiceListContainer.defaultProps = {\n    rows: [],\n};\n\nconst getServicePoint = (sp, servicePoints) => {\n    if (sp === '') {\n        return sp;\n    }\n    return servicePoints[sp] ? sp : undefined;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const path = (ownProps.path) || '';\n    const isLoading = selectServiceIsLoading(state) || selectGlobalSettingsIsLoading(state);\n    const columnsVisibility = selectServiceColumns(state);\n    const servicePoints = servicePointsSelector(state);\n    const servicePoint = getServicePoint(\n        lstrip(path, getLinkWithPath('')),\n        servicePoints,\n    );\n\n    return {\n        isLoading,\n        shouldIncludPlanColumn: selectServiceIncludesPlan(state, { path }),\n        offset: selectServiceOffset(state, { path }),\n        rows: selectServiceRows(state, { path }),\n        servicePoint,\n        sortColumn: selectServiceSortColumn(state, { path }),\n        sortOrder: selectServiceSortOrder(state, { path }),\n        totalNumberOfResults: selectTotalNumberOfServices(state, { path }),\n        columnsVisibility,\n        actionIndicatorTimeout: selectGlobalSetting(\n            state,\n            ACTION_STATUS_INDICATOR_TIMEOUT,\n        ),\n        search: selectServiceSearch(state),\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onAction(action, servicePath) {\n        dispatch(runServiceActionThunk({ action, servicePath }));\n    },\n    onExpand(path, column, isExpanded) {\n        return dispatch(setServiceExpandedAction(path, column, isExpanded));\n    },\n    onLoad(servicePoint, offset, sortColumn, sortOrder) {\n        isNonEmptyString(servicePoint) ? // eslint-disable-line no-unused-expressions\n            dispatch(getServices({\n                servicePoint,\n                offset,\n                chunkSize: SERVICE_CHUNK_SIZE,\n                sortColumn,\n                sortOrder,\n            }))\n            : dispatch(getServicePointsAndSchemas());\n    },\n    onSelectRows(isSelected, names) {\n        dispatch(selectServiceAction(isSelected, names));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ServiceListContainer);\n\nexport {\n    ServiceListContainer as _ServiceListContainer,\n    createButtonCellFactory as _createButtonCellFactory,\n    createPlanButtonCellFactory as _createPlanButtonCellFactory,\n    createExpandCell as _createExpandCell,\n    createPlanCell as _createPlanCell,\n    createConfigurationCell as _createConfigurationCell,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport Select from '@webui-one/components/ConfigRender/Select/Select';\nimport * as S from '@webui-one/core/schema';\nimport { isNonEmptyString, lstrip } from '@webui-one/core/utils/string';\nimport {\n    servicePointsSelector,\n} from 'modules/services/selectors';\nimport {\n    setLastServiceAction,\n} from 'modules/services/actions';\n\nimport {\n    selectSchema,\n} from 'modules/schemas/reducer';\nimport { getLinkWithPath } from './index';\nimport {\n    servicePoint as servicePointStyle,\n} from './ServiceManagerStyles';\n\nconst servicePointSorter = (a, b) => {\n    const { text: textA, value: valueA } = a;\n    const { text: textB, value: valueB } = b;\n    const valueCompare = valueA.localeCompare(valueB);\n    if (valueCompare !== 0) {\n        return valueCompare;\n    }\n    const textCompare = textA.localeCompare(textB);\n    if (textCompare !== 0) {\n        return textCompare;\n    }\n    return 0;\n};\n\nconst servicePointFilter = ([key, name]) => (\n    isNonEmptyString(name) && isNonEmptyString(key)\n);\n\nconst entryToOption = ([value, text]) => ({ text, value });\n\nconst getSortedOptions = points => (\n    (Object.entries(points || {}))\n        .filter(servicePointFilter)\n        .map(entryToOption)\n        .sort(servicePointSorter)\n);\n\nconst getValue = (points, servicePoint) => points[servicePoint] || '';\n\nclass ServicePointContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value) {\n        const { onSetLastService, router } = this.props;\n        onSetLastService(value);\n        router.push(getLinkWithPath(value));\n    }\n\n    render() {\n        const { points, servicePoint } = this.props;\n        return (\n            <div data-handle=\"service-point\" style={servicePointStyle}>\n                <Select\n                    editable\n                    onSetValue={this.onChange}\n                    options={getSortedOptions(points)}\n                    placeholder=\"Select service point...\"\n                    value={getValue(points, servicePoint)}\n                />\n            </div>\n        );\n    }\n}\n\nServicePointContainer.propTypes = {\n    onSetLastService: PropTypes.func,\n    points: PropTypes.shape({}),\n    router: PropTypes.shape(Object),\n    servicePoint: PropTypes.string,\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const path = (ownProps || {}).path || '';\n    const servicePoints = servicePointsSelector(state);\n    const servicePoint = lstrip(path, getLinkWithPath(''));\n    const points = Object.keys(servicePoints).reduce((acc, keypath) => {\n        acc[keypath] = S.name(selectSchema(state, keypath));\n        return acc;\n    }, {});\n    return {\n        points,\n        servicePoint,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onSetLastService(value) {\n        dispatch(setLastServiceAction(value));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withRouter(ServicePointContainer));\n\nexport {\n    ServicePointContainer as _ServicePointContainer,\n    entryToOption as _entryToOption,\n    getSortedOptions as _getSortedOptions,\n    getValue as _getValue,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n    servicePointSorter as _servicePointSorter,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as S from '@webui-one/core/schema';\nimport * as nodesActions from 'modules/nodes/actions';\nimport {\n    createDisallowExistsThunk,\n    deleteNodesThunk,\n} from 'modules/nodes/thunks';\nimport { isNonEmptyArray } from '@webui-one/core/utils/array';\nimport { isNonEmptyString } from '@webui-one/core/utils/string';\nimport {\n    getColumnChildren,\n    getKeyValue,\n    getQuerySelection,\n} from '@webui-one/core/utils/list';\nimport {\n    selectExists,\n} from 'modules/nodes/selectors';\nimport {\n    selectSelectedServiceRows,\n} from 'modules/services/selectors';\n\nimport {\n    isSchemaLoaded,\n    selectCurrentSchema,\n} from 'modules/schemas/reducer';\nimport AddServiceButton from './AddServiceButton';\nimport RemoveServiceButton from './RemoveServiceButton';\nimport {\n    serviceButtonContainer as serviceButtonContainerStyle,\n} from './ServiceManagerStyles';\n\nclass AddRemoveServiceContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onClose = this.onClose.bind(this);\n        this.onConfirm = this.onConfirm.bind(this);\n        this.onDeleteSelected = this.onDeleteSelected.bind(this);\n        this.showAddServiceModal = this.showAddServiceModal.bind(this);\n        this.state = {\n            showAddServiceModal: false,\n            errorOnCreate: undefined,\n        };\n    }\n\n    onClose() {\n        this.setState({ showAddServiceModal: false, errorOnCreate: undefined });\n    }\n\n    onConfirm(path, items) {\n        const { isPresenceContainer, onCreate } = this.props;\n\n        const createPath = isPresenceContainer\n            ? path\n            : `${path}{${getKeyValue(items, false)}}`;\n        return onCreate(createPath).then((result) => {\n            if (!result.error) {\n                this.onClose();\n            } else {\n                this.setState({ errorOnCreate: result.error });\n            }\n            return result;\n        });\n    }\n\n    onDeleteSelected() {\n        const { selectedServices, onDeleteRows } = this.props;\n        if (!isNonEmptyArray(selectedServices)) {\n            return;\n        }\n        onDeleteRows(selectedServices.map(row => row.rowKey));\n    }\n\n    showAddServiceModal() {\n        this.setState({ showAddServiceModal: true });\n    }\n\n    addServiceIsDisabled() {\n        const { exists, isPresenceContainer, path } = this.props;\n        if (isPresenceContainer && exists) {\n            return true;\n        }\n        return !isNonEmptyString(path);\n    }\n\n    removeServiceIsDisabled() {\n        const { selectedServices } = this.props;\n        return !isNonEmptyArray(selectedServices);\n    }\n\n    render() {\n        const { path } = this.props;\n        const { showAddServiceModal, errorOnCreate } = this.state;\n        return (\n            <div style={serviceButtonContainerStyle}>\n                <AddServiceButton\n                    disabled={this.addServiceIsDisabled()}\n                    onClick={this.showAddServiceModal}\n                    onClose={this.onClose}\n                    onConfirm={this.onConfirm}\n                    path={path}\n                    showModal={showAddServiceModal}\n                    error={errorOnCreate}\n                />\n                <RemoveServiceButton\n                    onClick={this.onDeleteSelected}\n                    path={path}\n                    disabled={this.removeServiceIsDisabled()}\n                />\n            </div>\n        );\n    }\n}\n\nAddRemoveServiceContainer.propTypes = {\n    exists: PropTypes.bool,\n    isPresenceContainer: PropTypes.bool,\n    onCreate: PropTypes.func.isRequired,\n    onDeleteRows: PropTypes.func.isRequired,\n    path: PropTypes.string.isRequired,\n    selectedServices: PropTypes.arrayOf(Object),\n};\n\nAddRemoveServiceContainer.defaultProps = {\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const path = ownProps.path || '';\n    const schema = selectCurrentSchema(state, { path });\n    const isPresenceContainer = S.isPresenceContainer(schema);\n    return {\n        columnChildren: !isPresenceContainer ? getColumnChildren(schema) : [],\n        exists: selectExists(state, path),\n        isPresenceContainer,\n        path,\n        selectedServices: selectSelectedServiceRows(state, { path }),\n        schema,\n        schemaIsLoaded: isSchemaLoaded(schema),\n    };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { dispatch } = dispatchProps;\n    const mergedProps = { ...ownProps, ...stateProps };\n    const onQueryData = (args) => {\n        const {\n            columnChildren,\n            schemaIsLoaded,\n            offset,\n            path,\n            sortColumn,\n            sortOrder,\n            chunkSize,\n        } = { ...mergedProps, ...args };\n\n        if (!schemaIsLoaded) { return Promise.resolve(undefined); }\n\n        const selection = getQuerySelection({ columnChildren });\n        return dispatch(nodesActions.query({\n            selection,\n            path,\n            sortColumn,\n            sortOrder,\n            initialOffset: offset,\n            chunkSize,\n        }));\n    };\n\n    return ({\n        ...mergedProps,\n        onCreate(createPath) {\n            return dispatch(createDisallowExistsThunk({ path: createPath }))\n                .then(result => (\n                    result && result.error ? result : onQueryData()\n                ));\n        },\n        onDeleteRows(keyPaths) {\n            return dispatch(deleteNodesThunk({ paths: keyPaths }))\n                .then(() => onQueryData());\n        },\n    });\n};\n\nexport default connect(\n    mapStateToProps,\n    undefined,\n    mergeProps,\n)(AddRemoveServiceContainer);\n\nexport {\n    AddRemoveServiceContainer as _AddRemoveServiceContainer,\n    mapStateToProps as _mapStateToProps,\n    mergeProps as _mergeProps,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AddSymbol from '@webui-one/styles/static/AddSymbol';\nimport styles from '@webui-one/components/ConfigRender/List/ListStyles';\nimport ModalSchemaInputContainer from 'Common/Components/Modal/ModalSchemaInputContainer';\nimport {\n    addServiceButton as addServiceButtonStyle,\n} from './ServiceManagerStyles';\n\nconst style = styles();\nconst stl = style.list.header;\n\nconst AddServiceButton = ({\n    disabled,\n    onClick,\n    onClose,\n    onConfirm,\n    path,\n    showModal,\n    error,\n}) => (<div data-handle=\"create-service\" style={addServiceButtonStyle}>\n    <button\n        data-handle=\"service-create-button\"\n        disabled={disabled}\n        onClick={onClick}\n        style={!disabled ? stl.button : stl.buttonDisabled}\n    >\n        <AddSymbol color={!disabled ? '#ffffff' : '#cccccc'} />\n    </button>\n    {showModal && <ModalSchemaInputContainer\n        title=\"Create service\"\n        path={path}\n        closeOnConfirm={false}\n        onClose={onClose}\n        onConfirm={onConfirm}\n        error={error}\n    />}\n</div>);\n\nAddServiceButton.propTypes = {\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onConfirm: PropTypes.func.isRequired,\n    path: PropTypes.string.isRequired,\n    showModal: PropTypes.bool,\n    error: PropTypes.string,\n};\n\nexport default AddServiceButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RemoveSymbol from '@webui-one/styles/static/RemoveSymbol';\nimport styles from '@webui-one/components/ConfigRender/List/ListStyles';\nimport {\n    removeServiceButton as removeServiceButtonStyle,\n} from './ServiceManagerStyles';\n\nconst style = styles();\nconst stl = style.list.header;\n\nconst RemoveServiceButton = ({\n    disabled,\n    onClick,\n    path,\n}) => (<div data-handle=\"remove-service\" style={removeServiceButtonStyle}>\n    <button\n        data-handle=\"service-delete-button\"\n        disabled={disabled}\n        key={`${path}btn1`}\n        style={!disabled ? stl.button : stl.buttonDisabled}\n        onClick={onClick}\n    >\n        <RemoveSymbol color={!disabled ? '#ffffff' : '#cccccc'} />\n    </button>\n</div>);\nRemoveServiceButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    path: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n};\n\nexport default RemoveServiceButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ToolTip from '@webui-one/components/ToolTip/ToolTip';\nimport {\n    selectSelectedServiceCount,\n    selectServiceCount,\n} from 'modules/services/selectors';\nimport { serviceCounter as style } from './ServiceManagerStyles';\n\nclass ServiceCounter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.showTooltip = this.showTooltip.bind(this);\n        this.hideTooltip = this.hideTooltip.bind(this);\n    }\n\n    showTooltip() {\n        this.tooltip.show();\n    }\n\n    hideTooltip() {\n        this.tooltip.hide();\n    }\n\n    render() {\n        const { selected, total } = this.props;\n        return (\n            <div style={style.wrapper}>\n                <ToolTip\n                    direction=\"left\"\n                    toolTipText=\"selected services / services in list\"\n                    ref={(tt) => { this.tooltip = tt; }}\n                />\n                <div\n                    data-handle=\"service-counter\"\n                    role=\"tooltip\"\n                    style={style.text}\n                    onMouseDown={this.showTooltip}\n                    onMouseUp={this.hideTooltip}\n                    onMouseEnter={this.showTooltip}\n                    onMouseLeave={this.hideTooltip}\n                >\n                    {`${selected} / ${total}`}\n                </div>\n            </div>\n        );\n    }\n}\n\nServiceCounter.propTypes = {\n    total: PropTypes.number,\n    selected: PropTypes.number,\n};\n\nconst mapStateToProps = (state, ownProps) =>\n    ({\n        total: selectServiceCount(state, ownProps),\n        selected: selectSelectedServiceCount(state, ownProps),\n    });\n\n\nexport default connect(\n    mapStateToProps,\n    null,\n)(ServiceCounter);\n","import { connect } from 'react-redux';\n\nimport {\n    setSearchAction,\n} from 'modules/services/actions';\nimport {\n    selectServiceSearch,\n} from 'modules/services/selectors';\n\nimport Search from 'Common/Components/Search/Search';\n\n\nconst mapDispatchToProps = dispatch => ({\n    onSetSearch(value) {\n        dispatch(setSearchAction(value));\n    },\n});\n\nconst mapStateToProps = state => ({\n    keyword: selectServiceSearch(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Search);\n\nexport {\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport style from './SearchStyles';\n\nconst Search = ({\n    keyword,\n    onSetSearch,\n}) => {\n    const [draft, setDraft] = useState(keyword);\n    const setSearch = (event) => {\n        const value = event.target.value.trim();\n        if (keyword !== value) {\n            onSetSearch(value);\n        }\n    };\n\n    useEffect(() => {\n        setDraft(keyword);\n    }, [keyword]);\n\n    const onChange = event => setDraft(event.target.value);\n    const onKeyDown = (event) => { if (event.key === 'Enter') setSearch(event); };\n\n    return (\n        <div style={style.wrapper}>\n            <input\n                value={draft}\n                onBlur={setSearch}\n                onChange={onChange}\n                onKeyDown={onKeyDown}\n                style={style.search}\n                placeholder=\"Search filter\"\n                data-handle=\"search\"\n            />\n        </div>\n    );\n};\nSearch.propTypes = {\n    keyword: PropTypes.string,\n    onSetSearch: PropTypes.func,\n};\nexport default Search;\n","const style = {\n    wrapper: {\n        margin: '0.1rem 0.25rem',\n        padding: '0.1875rem 0.5rem',\n        display: 'flex',\n        alignItems: 'center',\n        border: '1px solid rgb(182, 182, 187)',\n        borderRadius: '0.81rem',\n        backgroundColor: 'rgb(255, 255, 255)',\n        position: 'relative',\n        fontSize: '0.6875rem',\n        color: 'rgb(182, 182, 187)',\n        height: '1rem',\n        alignSelf: 'center',\n    },\n    search: {\n        border: 'none',\n        fontSize: '0.6rem',\n        width: '4rem',\n        paddingLeft: '0.5rem',\n        margin: '0px -2px',\n    },\n};\nexport default style;\n","import * as nodesActions from 'modules/nodes/actions';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport SelectMenu from '@webui-one/components/ConfigRender/List/SelectMenu';\nimport {\n    SERVICE_MANAGER_USER_STORAGE_PATH,\n    SERVICE_COLUMNS,\n} from 'modules/services/paths';\nimport { connect } from 'react-redux';\nimport { isVisibleColumn } from '@webui-one/core/utils/list';\nimport { selectServiceColumns, selectServiceIncludesPlan } from 'modules/services/selectors';\n\nconst ServiceColumnsContainer = ({\n    onSetColumnVisible,\n    columnsVisibility,\n    shouldIncludPlanColumn,\n}) => {\n    let columns = [...SERVICE_COLUMNS];\n\n    if (!shouldIncludPlanColumn) {\n        columns = columns.filter(c => c.key !== 'plan');\n    }\n\n    columns.forEach((c, index) => {\n        columns[index].isVisible = isVisibleColumn(columnsVisibility, c);\n    });\n\n    return (\n        <div style={{ margin: '0.1rem 0.25rem' }} data-handle=\"service-column-select\">\n            <SelectMenu\n                onChange={(key, value) =>\n                    onSetColumnVisible(SERVICE_MANAGER_USER_STORAGE_PATH, key, value)\n                }\n                columns={columns.filter(c => c.canBeHidden)}\n                enabled\n            />\n        </div>\n    );\n};\n\nServiceColumnsContainer.propTypes = {\n    onSetColumnVisible: PropTypes.func.isRequired,\n    columnsVisibility: PropTypes.shape(Object),\n    shouldIncludPlanColumn: PropTypes.bool,\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    columnsVisibility: selectServiceColumns(state),\n    shouldIncludPlanColumn: selectServiceIncludesPlan(state, ownProps),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSetColumnVisible(path, columnKey, value) {\n        return dispatch(nodesActions.setColumnVisibilityAction(path, columnKey, value));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ServiceColumnsContainer);\n\nexport {\n    ServiceColumnsContainer as _ServiceColumnsContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n"],"sourceRoot":""}